@page "/"
@using Pinetree.Client.Services

@rendermode InteractiveAuto

<PageTitle>Pinetree</PageTitle>
<HeadContent>
    <meta property="og:title" content="Pinetree" />
    <meta property="og:description" content="A hierarchical Markdown editor for your needs" />
    <meta property="og:image" content="Designer.jpeg" />
    <meta property="og:url" content="https://pinetree.azurewebsites.net/" />
</HeadContent>

<div style="display: flex; justify-content: center; align-items: center; height: 100vh; text-align: center; flex-direction: column;">
    <h1 style="font-size: 4em; margin-bottom: 0.5em;">Welcome to Pinetree</h1>
    <p style="font-size: 2em; margin-bottom: 1em;">
        A hierarchical Markdown editor for your needs
    </p>
    <blockquote>
        This service is a Markdown editor that allows files to be managed in a hierarchical structure.<br>
        Building on the "OnePager" concept, we place concise key points at the top and structure the details hierarchically.<br>
        By organizing brief explanations and details in a layered format, it enables a clearer, more concise, and visually structured way of writing.<br>
    </blockquote>

    <img src="Pinetree.png" alt="Pinetree Image" />
    <div class="mt-4">
        <a class="btn btn-outline-primary btn-lg m-2" href="/Tryit"><i class="bi bi-tools"></i>Try it now</a>
        <a class="btn btn-outline-success btn-lg m-2" href="Account/Register"><i class="bi bi-person"></i>Register</a>
    </div>
</div>

@code {
    [Inject]
    public required NavigationManager NavigationManager { get; set; }

    [Inject]
    public required AuthenticationStateProvider AuthenticationStateProvider { get; set; }

#if !DEBUG
    protected override async Task OnInitializedAsync()
    {
        await NavigateUserListIfAuthUser();
    }
#else
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await NavigateUserListIfAuthUser();
        }
    }
#endif
    private async Task NavigateUserListIfAuthUser()
    {
        var identity = await AuthenticationStateProvider.GetIdentityAsync();
        if (identity != null && identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/User");
        }
    }
}
