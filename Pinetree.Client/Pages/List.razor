@page "/List"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Pinetree.Client.VModel
@using Pinetree.Client.Services
@using Pinetree.Shared.Model
@using System.Net.Http

@rendermode InteractiveWebAssembly

<div class="editor-container">
    <div class="row">
        <div class="col-2">
            <div class="list-group">
                <button type="button" class="list-group-item list-group-item-action" @onclick="() => CreateFile()">
                    <i class="bi bi-file-earmark-plus"></i> Create File
                </button>
            </div>
        </div>
        <div class="col-10">
            <div class="d-flex flex-wrap">
                @foreach (var pinecone in PinetreeViews)
                {
                    <div class="card m-2" style="width:12rem; height: 16rem">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex justify-content-between">
                                <strong class="card-title" @onclick="() => OpenFile(pinecone.Id)" style="cursor:pointer">
                                    <i class="bi bi-file-earmark-text"></i>
                                    @pinecone.Title
                                </strong>
                                <i @onclick="() => ConfirmDelete(pinecone.Id)" class="bi bi-trash2 border px-1" style="cursor:pointer"></i>
                            </div>
                            <p class="card-text flex-grow-1" @onclick="() => OpenFile(pinecone.Id)" style="cursor:pointer">@((MarkupString)GetContent(pinecone.Content))</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    @if (TotalPages > 1)
    {
        <nav>
            <ul class="pagination justify-content-center">
                @for (int i = 1; i <= TotalPages; i++)
                {
                    <li class="page-item @(i == CurrentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => LoadPage(i)">@i</button>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

@code {
    [Inject]
    public required NavigationManager NavigationManager { get; set; }
    [Inject]
    public required AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject]
    public required IJSRuntime JS { get; set; }
    [Inject]
    public required HttpClient HttpClient { get; set; }

    private List<PinetreeView> PinetreeViews { get; set; } = new List<PinetreeView>();
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 100;
    private int TotalPages { get; set; }

    private string GetContent(string content)
    {
        var c = (content.Length < 100) ? content : content[..100];
        return MarkdownService.ToHtml(c);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var identity = await AuthenticationStateProvider.GetIdentityAsync();
            if (identity == null || !identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/");
            }
            await LoadPage(CurrentPage);
        }
    }

    private async Task LoadPage(int pageNumber)
    {
        CurrentPage = pageNumber;

        var topCount = await HttpClient.GetFromJsonAsync<int>($"/api/Pinecones/get-user-top-count");
        TotalPages = (int)Math.Ceiling(topCount / (double)PageSize);
        var list = await HttpClient.GetFromJsonAsync<List<Pinecone>>($"/api/Pinecones/get-user-top-list?pageNumber={CurrentPage}&pageSize={PageSize}");
        if (list == null) return;

        PinetreeViews = list.Select(x => x.ToPinetree(PinetreeView.Nothing)).ToList();
        StateHasChanged();
    }

    private async Task CreateFile()
    {
        var response = await HttpClient.PostAsJsonAsync("/api/Pinecones/add-top", new { });
        if (response.IsSuccessStatusCode)
        {
            var pinecone = await response.Content.ReadFromJsonAsync<Pinecone>();
            if (pinecone != null)
            {
                var url = $"/Edit/{pinecone.Id}";
                NavigationManager.NavigateTo(url);
            }
        }
    }

    private void OpenFile(long id)
    {
        var url = $"/Edit/{id}";
        NavigationManager.NavigateTo(url);
    }

    private async Task ConfirmDelete(long id)
    {
        var confirmed = await JS.ConfirmAsync("Are you sure you want to delete this item?");
        if (!confirmed) return;
        
        var response = await HttpClient.DeleteAsync($"/api/Pinecones/delete-include-child/{id}");
        if (!response.IsSuccessStatusCode) return;

        var itemToRemove = PinetreeViews.FirstOrDefault(p => p.Id == id);
        if (itemToRemove == null) return;

        PinetreeViews.Remove(itemToRemove);
        StateHasChanged();
    }
}
