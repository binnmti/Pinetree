@page "/User"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Pinetree.Client.VModel
@using Pinetree.Client.Services
@using Pinetree.Shared.Model
@using Pinetree.Shared.ViewModels
@using System.Net.Http

@rendermode InteractiveWebAssembly

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>User Dashboard</h1>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-md-2">
            <!-- Tab navigation -->
            <div class="list-group">
                <button @onclick="() => SetActiveTab(0)" class="list-group-item list-group-item-action @(activeTab == 0 ? "active" : "")">
                    <i class="bi bi-file-earmark-text"></i> My Documents
                </button>
                <button @onclick="() => SetActiveTab(1)" class="list-group-item list-group-item-action @(activeTab == 1 ? "active" : "")">
                    <i class="bi bi-images"></i> My Files
                </button>
            </div>
        </div>
        <div class="col-md-10">
            <!-- Tab content -->
            @if (activeTab == 0)
            {
                <!-- Documents Tab (former List.razor content) -->
                <div class="editor-container">
                    <div class="row">
                        <div class="col">
                            <div class="d-flex flex-wrap">
                                <!-- Add new file card at the beginning -->
                                <div class="card m-2" style="width:14rem; height: 16rem">
                                    <div class="card-body d-flex flex-column justify-content-center align-items-center"
                                         @onclick="() => CreateFile()" style="cursor:pointer">
                                        <i class="bi bi-file-earmark-plus" style="font-size: 2rem;"></i>
                                        <p class="mt-2">Create New File</p>
                                    </div>
                                </div>
                                @foreach (var pinecone in PinetreeViews)
                                {
                                    <div class="card m-2" style="width:14rem; height: 16rem">
                                        <div class="card-body d-flex flex-column">
                                            <div class="mt-1 d-flex align-items-center text-truncate">
                                                <i class="bi @(pinecone.IsPublic ? "bi-globe" : "bi-file-earmark-lock") border px-1 me-1" 
                                                   @onclick="() => ToggleVisibility(pinecone.Guid, !pinecone.IsPublic)"
                                                   title="@(pinecone.IsPublic ? "Public" : "Private")"
                                                   style="cursor:pointer"></i>
                                                @if (pinecone.IsPublic)
                                                {
                                                    <a href="@($"/View/{Username}/{pinecone.Guid}")" target="_blank" class="text-muted small text-truncate">@NavigationManager.ToAbsoluteUri($"/View/{Username}/{pinecone.Guid}")</a>
                                                }
                                                else
                                                {
                                                    <small class="text-muted">Only me</small>
                                                }
                                            </div>
                                            <div class="d-flex justify-content-between">
                                                <strong class="card-title" @onclick="() => OpenFile(pinecone.Guid)" style="cursor:pointer">
                                                    <i class="bi bi-file-earmark-text"></i>
                                                    @pinecone.Title
                                                </strong>
                                                <div>
                                                    <i @onclick="() => ConfirmDelete(pinecone.Guid)" class="bi bi-trash2 border px-1" style="cursor:pointer"></i>
                                                </div>
                                            </div>
                                            <p class="card-text flex-grow-1 mt-1" @onclick="() => OpenFile(pinecone.Guid)" style="cursor:pointer">@((MarkupString)GetContent(pinecone.Content))</p>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    @if (TotalPages > 1)
                    {
                        <nav>
                            <ul class="pagination justify-content-center">
                                @for (int i = 1; i <= TotalPages; i++)
                                {
                                    <li class="page-item @(i == CurrentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => LoadPage(i)">@i</button>
                                    </li>
                                }
                            </ul>
                        </nav>
                    }
                </div>
            }
            else if (activeTab == 1)
            {
                <!-- Files Tab (former UserImageFiles.razor content) -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">Storage Usage</div>
                            <div class="card-body">
                                @if (storageUsage != null)
                                {
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar"
                                             style="width: @storageUsage.percentage%;"
                                             aria-valuenow="@storageUsage.percentage"
                                             aria-valuemin="0"
                                             aria-valuemax="100">
                                            @storageUsage.percentage.ToString("0.0")%
                                        </div>
                                    </div>
                                    <div class="mt-2">
                                        Used: @FormatBytes(storageUsage.used) / @FormatBytes(storageUsage.quota)
                                    </div>
                                }
                                else
                                {
                                    <div>Loading...</div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Preview</th>
                                <th>Filename</th>
                                <th>Size</th>
                                <th>Upload Date</th>
                                <th>Document</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (files == null)
                            {
                                <tr>
                                    <td colspan="6" class="text-center">Loading...</td>
                                </tr>
                            }
                            else if (!files.Any())
                            {
                                <tr>
                                    <td colspan="6" class="text-center">No files found</td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var file in files)
                                {
                                    <tr>
                                        <td>
                                            @if (IsImageFile(file.ContentType))
                                            {
                                                <a href="@file.BlobUrl" target="_blank">
                                                    <img src="@file.BlobUrl" style="max-height: 50px; max-width: 50px;" />
                                                </a>
                                            }
                                            else
                                            {
                                                <a href="@file.BlobUrl" target="_blank">
                                                    <i class="bi bi-file-earmark"></i>
                                                </a>
                                            }
                                        </td>
                                        <td>@file.FileName</td>
                                        <td>@FormatBytes(file.SizeInBytes)</td>
                                        <td>@file.UploadedAt.ToLocalTime().ToString("yyyy/MM/dd HH:mm")</td>
                                        <td>
                                            @if (string.IsNullOrEmpty(file.PineconeTitle))
                                            {
                                                <span class="text-muted"><i class="bi bi-exclamation-circle"></i> Deleted Documents</span>
                                            }
                                            else
                                            {
                                                <a href="/Edit/@file.PineconeGuid">/@file.PineconeTitle</a>
                                            }
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteFile(file.Id)">
                                                Delete
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private int activeTab = 0;
    private List<PinetreeView> PinetreeViews { get; set; } = new List<PinetreeView>();
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 100;
    private int TotalPages { get; set; }
    private List<UserBlobViewModel>? files;
    private UserFiles? storageUsage;
    private string Username { get; set; } = "";

    private async Task SetActiveTab(int tabIndex)
    {
        activeTab = tabIndex;
        if (activeTab == 0)
        {
            await LoadPage(CurrentPage);
        }
        else if (activeTab == 1)
        {
            _ = LoadFilesAsync();
            _ = LoadStorageUsageAsync();
        }
    }

    private string GetContent(string content)
    {
        var c = (content.Length < 100) ? content : content[..100];
        return MarkdownService.ToHtml(c);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var identity = await AuthenticationStateProvider.GetIdentityAsync();
            if (identity == null || !identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/");
                return;
            }
            Username = identity.Name ?? "";
            await LoadPage(CurrentPage);
        }
    }

    private async Task LoadPage(int pageNumber)
    {
        CurrentPage = pageNumber;

        var topCount = await Http.GetFromJsonAsync<int>($"/api/Pinecones/get-user-top-count");
        TotalPages = (int)Math.Ceiling(topCount / (double)PageSize);
        var list = await Http.GetFromJsonAsync<List<Pinecone>>($"/api/Pinecones/get-user-top-list?pageNumber={CurrentPage}&pageSize={PageSize}");
        if (list == null) return;

        PinetreeViews = list.Select(x => x.ToPinetree(PinetreeView.Nothing)).ToList();
        StateHasChanged();
    }

    private async Task CreateFile()
    {
        var response = await Http.PostAsJsonAsync("/api/Pinecones/add-top", new { });
        if (response.IsSuccessStatusCode)
        {
            var pinecone = await response.Content.ReadFromJsonAsync<Pinecone>();
            if (pinecone != null)
            {
                var url = $"/Edit/{pinecone.Guid}";
                NavigationManager.NavigateTo(url);
            }
        }
    }

    private void OpenFile(Guid guid)
    {
        var url = $"/Edit/{guid}";
        NavigationManager.NavigateTo(url);
    }

    private async Task ToggleVisibility(Guid guid, bool isPublic)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/Pinecones/toggle-visibility/{guid}", new { IsPublic = isPublic });
            if (response.IsSuccessStatusCode)
            {
                // Update the local collection after successful API call
                var item = PinetreeViews.FirstOrDefault(p => p.Guid == guid);
                if (item != null)
                {
                    item.IsPublic = isPublic;
                    StateHasChanged();
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to update visibility: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating visibility: {ex.Message}");
        }
    }

    private async Task ConfirmDelete(Guid guid)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
        if (!confirmed) return;

        var response = await Http.DeleteAsync($"/api/Pinecones/delete-include-child/{guid}");
        if (!response.IsSuccessStatusCode) return;

        var itemToRemove = PinetreeViews.FirstOrDefault(p => p.Guid == guid);
        if (itemToRemove == null) return;

        PinetreeViews.Remove(itemToRemove);
        StateHasChanged();
    }

    private async Task LoadFilesAsync()
    {
        try
        {
            files = await Http.GetFromJsonAsync<List<UserBlobViewModel>>("api/Images/list");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to load file list: {ex.Message}");
        }
    }

    private async Task LoadStorageUsageAsync()
    {
        try
        {
            storageUsage = await Http.GetFromJsonAsync<UserFiles>("api/Images/usage");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to load storage usage: {ex.Message}");
        }
    }

    private async Task DeleteFile(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this file?");
        if (!confirmed) return;

        try
        {
            var response = await Http.DeleteAsync($"api/Images/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadFilesAsync();
                await LoadStorageUsageAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error during deletion: {ex.Message}");
        }
    }

    private string FormatBytes(long bytes)
    {
        string[] suffix = { "B", "KB", "MB", "GB", "TB" };
        int i;
        double dblBytes = bytes;
        for (i = 0; i < suffix.Length && bytes >= 1024; i++, bytes /= 1024)
        {
            dblBytes = bytes / 1024.0;
        }
        return $"{dblBytes:0.##} {suffix[i]}";
    }

    private bool IsImageFile(string contentType)
    {
        return contentType.StartsWith("image/");
    }

    private class UserFiles
    {
        public long used { get; set; }
        public long quota { get; set; }
        public double percentage { get; set; }
    }
}
