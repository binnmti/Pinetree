@page "/feedback"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json

@rendermode InteractiveWebAssembly

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<PageTitle>Feedback - Pinetree</PageTitle>

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card shadow-lg border-0">
                <div class="card-body p-5">
                    <h1 class="text-center mb-4">Help Us With Your Feedback</h1>

                    <div class="alert alert-info mb-4">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-gift-fill fs-4 me-2"></i>
                            <strong>Feedback Promotion Period:</strong> Selected users who provide valuable feedback will receive a permanent free pass!
                        </div>
                    </div>

                    <div class="row mb-5">
                        <div class="col-md-12 text-center">
                            <a href="https://discord.gg/xxjcsFcg" target="_blank" class="btn btn-primary btn-lg px-5 py-3">
                                <i class="bi bi-discord fs-4 me-2"></i>Join Our Discord
                            </a>
                            <p class="mt-3 text-muted">Join our Discord community and share your feedback directly with us.</p>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <h4 class="mb-3">Or Send Your Feedback to Discord Directly Through This Form</h4>
                            <EditForm Model="@feedbackModel" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger mb-3" />

                                <div class="mb-3">
                                    <label for="name" class="form-label">Your Name</label>
                                    <InputText id="name" @bind-Value="feedbackModel.Name" class="form-control" />
                                    <ValidationMessage For="@(() => feedbackModel.Name)" class="text-danger" />
                                </div>

                                <div class="mb-3">
                                    <label for="feedback" class="form-label">Feedback Content</label>
                                    <InputTextArea id="feedback" @bind-Value="feedbackModel.Message" class="form-control" rows="5" />
                                    <ValidationMessage For="@(() => feedbackModel.Message)" class="text-danger" />
                                </div>

                                <div class="mb-3">
                                    <label for="feedbackType" class="form-label">Feedback Type</label>
                                    <InputSelect id="feedbackType" @bind-Value="feedbackModel.FeedbackType" class="form-select">
                                        <option value="">Please select</option>
                                        <option value="Feature">Feature Request</option>
                                        <option value="Bug">Bug Report</option>
                                        <option value="UX">User Experience</option>
                                        <option value="ProPlanCoupon">Free Professional Plan Coupon Request</option>
                                        <option value="Other">Other</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => feedbackModel.FeedbackType)" class="text-danger" />
                                </div>

                                <button type="submit" class="btn btn-success btn-lg w-100 mt-3" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Sending...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-discord me-2"></i>
                                        <span>Send Feedback to Discord</span>
                                    }
                                </button>
                            </EditForm>

                            @if (isSubmitted)
                            {
                                <div class="alert alert-success mt-4">
                                    <i class="bi bi-check-circle-fill me-2"></i>
                                    Your feedback has been sent to Discord. Thank you!
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger mt-4">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                    @errorMessage
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private FeedbackModel feedbackModel = new();
    private bool isSubmitting = false;
    private bool isSubmitted = false;
    private string? errorMessage;

    private class FeedbackModel
    {
        [Required(ErrorMessage = "Please enter your name")]
        [StringLength(100, ErrorMessage = "Name must be 100 characters or less")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please enter your feedback")]
        [StringLength(2000, ErrorMessage = "Feedback must be 2000 characters or less")]
        public string Message { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please select a feedback type")]
        public string FeedbackType { get; set; } = string.Empty;
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        errorMessage = null;

        try
        {
            // Create data to send to Discord webhook
            var discordPayload = new
            {
                username = "Pinetree Feedback Bot",
                embeds = new[]
                {
                    new {
                        title = $"Feedback: {feedbackModel.FeedbackType}",
                        description = feedbackModel.Message,
                        color = 5814783, // Teal color
                        fields = new[]
                        {
                            new {
                                name = "Sender",
                                value = feedbackModel.Name,
                                inline = true
                            },
                            new {
                                name = "Timestamp",
                                value = $"{DateTime.Now:yyyy/MM/dd HH:mm:ss}",
                                inline = true
                            }
                        },
                        footer = new
                        {
                            text = "Pinetree Feedback Form"
                        }
                    }
                }
            };

            // Send to Discord webhook through server-side API
            var response = await Http.PostAsJsonAsync("api/discord/webhook", discordPayload);

            if (response.IsSuccessStatusCode)
            {
                // Display success message
                isSubmitted = true;

                // Reset form
                feedbackModel = new FeedbackModel();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Send Error: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}