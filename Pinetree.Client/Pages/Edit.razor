@page "/Edit/{GuidString}"
@attribute [Authorize]

@using System.Net.Http
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Pinetree.Client.Services
@using Pinetree.Client.Utilities
@using Pinetree.Client.ViewModels
@using Pinetree.Shared
@using Pinetree.Shared.ViewModels

@rendermode InteractiveWebAssembly

@if (isLoading)
{
    <LoadingSpinner Message="Loading document..." />
}
else if (Pinetree != null)
{
    <Markdown Pinetree="@(Pinetree)" Guid="@(Guid)" IsTry=false IsProfessional=IsProfessional FileCount=@FileCount />
}
else
{
    <div class="alert alert-warning mt-3" role="alert">
        <h4 class="alert-heading">Document Not Found</h4>
        <p>The requested document could not be found or you don't have permission to edit it.</p>
    </div>
}

@code {
    [Parameter]
    public string GuidString { get; set; } = string.Empty;

    private Guid Guid => Guid.TryParse(GuidString, out var guid) ? guid : Guid.Empty;

    private PinetreeView? Pinetree { get; set; }
    private string? OriginalContent { get; set; } // YAML Front Matter付きの元コンテンツを保持
    private int FileCount { get; set; }
    private bool IsProfessional { get; set; }
    private bool isLoading = true;

    [Inject]
    public required NavigationManager NavigationManager { get; set; }
    [Inject]
    public required AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject]
    public HttpClient HttpClient { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                if (!user.Identity?.IsAuthenticated ?? false)
                {
                    NavigationManager.NavigateTo("/");
                    return;
                }
                var roleClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
                IsProfessional = Roles.IsProfessional(roleClaim?.Value ?? "");
                var hit = await HttpClient.GetFromJsonAsync<PineconeViewModelWithChildren>($"/api/Pinecones/get-include-child/{Guid}");
                if (hit == null)
                {
                    NavigationManager.NavigateTo("/");
                    return;
                }
                (Pinetree, FileCount) = hit.ToPinetreeIncludeChild();
                
                // Store original content for potential YAML Front Matter handling
                if (Pinetree != null && !string.IsNullOrWhiteSpace(Pinetree.Content))
                {
                    OriginalContent = Pinetree.Content;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading document: {ex.Message}");
                // Pinetree remains null, will show error message
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }
}
