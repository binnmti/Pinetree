@page "/user-files"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Pinetree.Shared.Model

@rendermode InteractiveAuto

@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h1>マイファイル</h1>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">ストレージ使用量</div>
            <div class="card-body">
                @if (storageUsage != null)
                {
                    <div class="progress">
                        <div class="progress-bar" role="progressbar" 
                        style="width: @storageUsage.percentage%;"
                        aria-valuenow="@storageUsage.percentage" 
                        aria-valuemin="0" 
                        aria-valuemax="100">
                            @storageUsage.percentage.ToString("0.0")%
                        </div>
                    </div>
                    <div class="mt-2">
                        使用量: @FormatBytes(storageUsage.used) / @FormatBytes(storageUsage.quota)
                    </div>
                }
                else
                {
                    <div>読み込み中...</div>
                }
            </div>
        </div>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>プレビュー</th>
                <th>ファイル名</th>
                <th>サイズ</th>
                <th>アップロード日時</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @if (files == null)
            {
                <tr>
                    <td colspan="5" class="text-center">読み込み中...</td>
                </tr>
            }
            else if (!files.Any())
            {
                <tr>
                    <td colspan="5" class="text-center">ファイルがありません</td>
                </tr>
            }
            else
            {
                @foreach (var file in files)
                {
                    <tr>
                        <td>
                            @if (IsImageFile(file.ContentType))
                            {
                                <img src="@file.BlobUrl" style="max-height: 50px; max-width: 50px;" />
                            }
                            else
                            {
                                <i class="bi bi-file-earmark"></i>
                            }
                        </td>
                        <td>@FormatBytes(file.SizeInBytes)</td>
                        <td>@file.UploadedAt.ToLocalTime().ToString("yyyy/MM/dd HH:mm")</td>
                        <td>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteFile(file.Id)">
                                削除
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {

    private List<UserBlobInfo>? files;
    private UserFiles? storageUsage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilesAsync();
            await LoadStorageUsageAsync();
            StateHasChanged();
        }
    }

    private async Task LoadFilesAsync()
    {
        try
        {
            files = await Http.GetFromJsonAsync<List<UserBlobInfo>>("api/Images/list");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"ファイル一覧の取得に失敗しました: {ex.Message}");
        }
    }

    private async Task LoadStorageUsageAsync()
    {
        try
        {
            storageUsage = await Http.GetFromJsonAsync<UserFiles>("api/Images/usage");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"使用量の取得に失敗しました: {ex.Message}");
        }
    }

    private async Task DeleteFile(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "本当に削除しますか？");
        if (!confirmed) return;

        try
        {
            var response = await Http.DeleteAsync($"api/Images/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadFilesAsync();
                await LoadStorageUsageAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"削除に失敗しました: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"削除処理中にエラーが発生しました: {ex.Message}");
        }
    }

    private string FormatBytes(long bytes)
    {
        string[] suffix = { "B", "KB", "MB", "GB", "TB" };
        int i;
        double dblBytes = bytes;
        for (i = 0; i < suffix.Length && bytes >= 1024; i++, bytes /= 1024)
        {
            dblBytes = bytes / 1024.0;
        }
        return $"{dblBytes:0.##} {suffix[i]}";
    }

    private bool IsImageFile(string contentType)
    {
        return contentType.StartsWith("image/");
    }

    private class UserFiles
    {
        public long used { get; set; }
        public long quota { get; set; }
        public double percentage { get; set; }
    }
}
