@page "/view/{User}/{Guid:guid}"
@using Pinetree.Client.ViewModels
@using Pinetree.Client.Services  
@using Pinetree.Client.Pages.Components
@using Pinetree.Client.Components
@using Pinetree.Shared.ViewModels

@rendermode InteractiveAuto

@if (isLoading)
{
    <LoadingSpinner Message="Loading document..." />
}
else if (Pinetree != null)
{
    <Markdown Pinetree="@(Pinetree)" Guid="@(Guid)" IsTry=false IsProfessional=false FileCount=@FileCount IsPublicView=true />
}
else
{
    <div class="alert alert-warning mt-3" role="alert">
        <h4 class="alert-heading">Document Not Found</h4>
        <p>The requested document could not be found or you don't have permission to view it.</p>
    </div>
}

@code {
    [Parameter]
    public string User { get; set; } = "";

    [Parameter]
    public Guid Guid { get; set; }

    private PinetreeView? Pinetree { get; set; }
    private int FileCount { get; set; }
    private bool isLoading = true;

    [Inject]
    public required NavigationManager NavigationManager { get; set; }
    [Inject]
    public required HttpClient HttpClient { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var response = await HttpClient.GetFromJsonAsync<PineconeViewModelWithChildren>($"/api/Pinecones/get-view-include-child/{Guid}");
                if (response == null || response.Guid == Guid.Empty)
                {
                    NavigationManager.NavigateTo("/");
                    return;
                }
                
                (Pinetree, FileCount) = response.ToPinetreeIncludeChild();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading document: {ex.Message}");
                // Pinetree remains null, will show error message
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }
}
