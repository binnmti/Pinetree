@page "/view/{User}/{Guid:guid}"
@using Pinetree.Client.ViewModels
@using Pinetree.Client.Services
@using Pinetree.Client.Pages.Components
@using Pinetree.Client.Utilities
@using Pinetree.Shared.ViewModels

@rendermode InteractiveAuto

<PageTitle>@GetPageTitle()</PageTitle>
<HeadContent>
    <meta property="og:title" content=@GetPageTitle() />
    <meta name="twitter:title" content=@GetPageTitle() />
    <meta name="description" content=@GetDescription() />
    <meta property="og:description" content=@GetDescription() />
    <meta name="twitter:description" content=@GetDescription() />
    <meta property="og:url" content=@GetCurrentUrl() />
    @if (!string.IsNullOrWhiteSpace(GetOgImage()))
    {
        <meta property="og:image" content=@GetOgImage() />
        <meta name="twitter:image" content=@GetOgImage() />
    }
    <link rel="canonical" href=@GetCurrentUrl() />
</HeadContent>

@if (isLoading)
{
    <LoadingSpinner Message="Loading document..." />
}
else if (Pinetree != null)
{
    <Markdown Pinetree="@(Pinetree)" Guid="@(Guid)" IsTry=false IsProfessional=false FileCount=@FileCount IsPublicView=true User="@User" UserProfileIconUrl="@UserProfileIconUrl" />
}
else
{
    <div class="alert alert-warning mt-3" role="alert">
        <h4 class="alert-heading">Document Not Found</h4>
        <p>The requested document could not be found or you don't have permission to view it.</p>
    </div>
}

@code {
    [Parameter]
    public string? User { get; set; }

    [Parameter]
    public Guid Guid { get; set; }
    private PinetreeView? Pinetree { get; set; }
    private string? OriginalContent { get; set; } // YAML Front Matter付きの元コンテンツを保持
    private int FileCount { get; set; }
    private bool isLoading = true;
    private string? UserProfileIconUrl { get; set; }

    [Inject]
    public required NavigationManager NavigationManager { get; set; }
    [Inject]
    public required HttpClient HttpClient { get; set; }

    private string GetPageTitle()
    {
        var yamlTitle = YamlFrontMatterHelper.GetYamlFrontMatterValue(OriginalContent, "title");
        if (!string.IsNullOrWhiteSpace(yamlTitle))
        {
            return yamlTitle;
        }
        return $"{Pinetree?.Title} - {User}'s Document | Pinetree";
    }

    private string GetDescription()
    {
        var yamlDescription = YamlFrontMatterHelper.GetYamlFrontMatterValue(OriginalContent, "description");
        if (!string.IsNullOrWhiteSpace(yamlDescription))
        {
            return yamlDescription;
        }

        if (Pinetree?.Content != null && !string.IsNullOrWhiteSpace(Pinetree.Content))
        {
            // Remove YAML Front Matter and get first 150 characters of content as description
            var contentWithoutFrontMatter = YamlFrontMatterHelper.RemoveYamlFrontMatter(Pinetree.Content);
            var content = System.Text.RegularExpressions.Regex.Replace(contentWithoutFrontMatter, @"[#*`\[\]()]", "").Trim();
            return content.Length > 150 ? content.Substring(0, 150) + "..." : content;
        }
        return $"View {User}'s hierarchical markdown document on Pinetree - a browser-based hierarchical markdown editor.";
    }

    private string GetCurrentUrl()
    {
        return NavigationManager.Uri;
    }

    private string GetOgImage()
    {
        var yamlImage = YamlFrontMatterHelper.GetYamlFrontMatterValue(OriginalContent, "image");
        if (!string.IsNullOrWhiteSpace(yamlImage))
        {
            // If it's a relative path, make it absolute
            if (yamlImage.StartsWith("/"))
            {
                return $"{NavigationManager.BaseUri.TrimEnd('/')}{yamlImage}";
            }
            return yamlImage;
        }
        return string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var baseUrl = NavigationManager.BaseUri;
            var response = await HttpClient.GetFromJsonAsync<PineconeViewModelWithChildren>($"{baseUrl}api/Pinecones/get-view-include-child/{Guid}");
            if (response == null || response.Guid == Guid.Empty)
            {
                NavigationManager.NavigateTo("/");
                return;
            }
            (Pinetree, FileCount) = response.ToPinetreeIncludeChild();
            
            // Store original content with YAML Front Matter for meta tag extraction
            if (Pinetree != null && !string.IsNullOrWhiteSpace(Pinetree.Content))
            {
                OriginalContent = Pinetree.Content;
                // Remove YAML Front Matter from display content only
                Pinetree.Content = YamlFrontMatterHelper.RemoveYamlFrontMatter(Pinetree.Content);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading document: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                if (!string.IsNullOrEmpty(User))
                {
                    var baseUrl = NavigationManager.BaseUri;
                    var profileResponse = await HttpClient.GetAsync($"{baseUrl}api/Images/user-profile-icon/{User}");
                    if (profileResponse.IsSuccessStatusCode)
                    {
                        var profileResult = await profileResponse.Content.ReadFromJsonAsync<UserProfileIconViewModel>();
                        UserProfileIconUrl = profileResult?.Url;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading document: {ex.Message}");
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }
}
