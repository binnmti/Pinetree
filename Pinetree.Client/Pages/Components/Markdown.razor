@using Pinetree.Client.VModel
@using Pinetree.Client.Services
@using Pinetree.Client.Pages.Components;
@using Pinetree.Shared.Model

@implements IAsyncDisposable

<div class="resizable-page">
    @if (IsTry)
    {
        <div class="description-bar">
            <div class="alert alert-primary" role="alert">
                <i class="bi bi-info-circle-fill"></i>
                If you want to create multiple files, please <a href="Account/Register" class="alert-link">register</a>.
            </div>
        </div>
    }
    <div class="panels-section">
        <div class="panels-row">
            <div id="panel1" class="panel">
                <div class="panel-content-wrapper">
                    <div class="panel-header">
                    </div>
                    <div class="panel-content">
                        <div>
                            <div class="pinetree-view">
                                <div class="list-group">
                                    @if (!IsTry)
                                    {
                                        <div>
                                            <button type="button" class="list-group-item list-group-item-action" @onclick="OnFileListClick">
                                                <i class="bi bi-card-list" aria-hidden="true"></i> File List
                                            </button>
                                        </div>
                                    }
                                    <div>
                                        <TreeView Pinetree="@Pinetree" Guid="@Guid" IsTry=@IsTry IsProfessional=IsProfessional OnChildEvent="SetCurrent" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="panel-footer">
                        <div>
                            FileCount : @FileCount
                        </div>
                    </div>
                </div>
            </div>

            <div class="resizer" id="resizer1"></div>

            <div class="right-panels">
                <div class="common-header">
                    <div class="markdown-title d-flex align-items-center">
                        <input @bind="@(Title)" @oninput="OnInputTitleChange" placeholder="Untitled" class="mx-1 flex-grow-1" />
                        <div class="d-flex align-items-center ms-2">
                            <button @onclick="SaveChanges" disabled="@(!HasPendingChanges() || IsTry || _isSaving)"
                                    class="btn btn-sm btn-primary me-2" title="Save changes">
                                @if (_isSaving)
                                {
                                    <span class="d-flex align-items-center">
                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                        <span>Saving...</span>
                                    </span>
                                }
                                else
                                {
                                    <span class="d-flex align-items-center">
                                        <i class="bi bi-save me-1"></i>
                                        <span>Save</span>
                                    </span>
                                }
                            </button>
                        </div>
                    </div>
                    <div class="toolbar bg-light border-bottom d-flex align-items-center p-1">
                        <div class="btn-toolbar" role="toolbar" aria-label="Markdown editing toolbar">
                            <div class="btn-group me-2" role="group" aria-label="Special actions">
                                <button type="button" class="btn btn-sm btn-outline-success" title="Move selected text to child file" @onclick="ExtractToChildFile">
                                    <i class="bi bi-file-earmark-arrow-down"></i> Extract to Child
                                </button>
                            </div>
                            <div class="btn-group me-2" role="group" aria-label="Undo/Redo">
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Undo (Ctrl+Z)" @onclick="UndoAsync" disabled="@(!CanUndo)">
                                    <i class="bi bi-arrow-counterclockwise"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Redo (Ctrl+Y)" @onclick="RedoAsync" disabled="@(!CanRedo)">
                                    <i class="bi bi-arrow-clockwise"></i>
                                </button>
                            </div>
                            <div class="btn-group me-2" role="group" aria-label="Text formatting">
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Bold" @onclick='() => FormatText("**", "**")'>
                                    <i class="bi bi-type-bold"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Italic" @onclick='() => FormatText("*", "*" )'>
                                    <i class="bi bi-type-italic"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Strikethrough" @onclick='() => FormatText("~~", "~~" )'>
                                    <i class="bi bi-type-strikethrough"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Heading" @onclick='() => InsertList("# ")'>
                                    <i class="bi bi-type-h1"></i>
                                </button>
                            </div>
                            <div class="btn-group me-2" role="group" aria-label="List formatting">
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Bullet List" @onclick='() => InsertList("- ")'>
                                    <i class="bi bi-list-ul"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Numbered List" @onclick='() => InsertList("1. ")'>
                                    <i class="bi bi-list-ol"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Check List" @onclick='() => InsertList("- [ ] ")'>
                                    <i class="bi bi-check-square"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Insert Code Block" @onclick='() => FormatText("```\n", "\n```" )'>
                                    <i class="bi bi-code-slash"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Quotation" @onclick='() => InsertList("> ")'>
                                    <i class="bi bi-quote"></i>
                                </button>
                            </div>
                            <div class="btn-group me-2" role="group" aria-label="Insert elements">
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Insert Link" @onclick='InsertLink'>
                                    <i class="bi bi-link-45deg"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Insert Image" @onclick="InsertImage">
                                    <i class="bi bi-image"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Insert Grid" @onclick="InsertGrid">
                                    <i class="bi bi-grid-3x2"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-dark" title="Insert Line" @onclick="InsertLine">
                                    <i class="bi bi-dash"></i>
                                </button>
                            </div>
                            <div class="btn-group ms-2" role="group" aria-label="View mode">
                                <button type="button" class="btn btn-sm @(ViewMode == "split" ? "btn-primary" : "btn-outline-secondary")"
                                        @onclick='() => SetViewMode("split")' title="Split view">
                                    <i class="bi bi-layout-split"></i>
                                </button>
                                <button type="button" class="btn btn-sm @(ViewMode == "edit" ? "btn-primary" : "btn-outline-secondary")"
                                        @onclick='() => SetViewMode("edit")' title="Edit only">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button type="button" class="btn btn-sm @(ViewMode == "preview" ? "btn-primary" : "btn-outline-secondary")"
                                        @onclick='() => SetViewMode("preview")' title="Preview only">
                                    <i class="bi bi-eye"></i>
                                </button>
                            </div>
                        </div>
                        <div class="btn-group ms-auto" role="group" aria-label="Id actions">
                            <button @onclick="CopyDocumentId" class="btn btn-sm btn-outline-secondary" title="@(_copyIconState ? "Copied!" : $"Click to copy {Current.Guid}")">
                                <span class="d-flex align-items-center">
                                    <i class="@(_copyIconState ? "bi bi-check-lg" : "bi bi-clipboard")" style="transition: all 0.3s"></i>
                                    <small class="ms-1">ID: @($"{Current.Guid.ToString()[..8]}...")</small>
                                </span>
                            </button>
                        </div>
                        <i class="bi bi-question-circle ms-1 p-1 text-body" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" data-bs-custom-class="custom-tooltip"
                           title="<strong>Document ID</strong><br>This unique identifier can be used to reference this document in markdown links.<br>Format: [link text](//ID)"></i>
                    </div>
                </div>
                <div class="right-panels-container">
                    <div id="panel2" class="panel"
                         style="display: @(ViewMode == "edit" || ViewMode == "split" ? "flex" : "none");
                            @(ViewMode == "edit" ? "flex: 1 !important; width: 100% !important;" : "")">
                        <div class="panel-content-wrapper">
                            <div class="panel-content">
                                <textarea @ref="TextAreaRef" @bind="@(Content)" class="no-resize"
                                          style="width:100%; height:99%; padding-bottom: 50vh; box-sizing: border-box;"
                                          @oninput="OnInputChange" placeholder="Write your markdown here..."></textarea>
                            </div>
                            <div class="panel-footer">
                                <div class="counter">@Content.Length characters</div>
                            </div>
                        </div>
                    </div>
                    <div class="resizer" id="resizer2" style="display: @(ViewMode == "split" ? "block" : "none")"></div>
                    <div id="panel3" class="panel" style="display: @(ViewMode == "preview" || ViewMode == "split" ? "flex" : "none")">
                        <div class="panel-content-wrapper">
                            <div class="panel-content">
                                <div @ref="MarkdownContainer"
                                     class="border"
                                     style="width:100%; height:99%; overflow:auto;">
                                    @((MarkupString)MarkdownText)
                                </div>
                            </div>
                            <div class="panel-footer">
                                <div class="counter">-</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid Guid { get; set; }

    [Parameter]
    public PinetreeView Pinetree { get; set; } = PinetreeView.Nothing;

    [Parameter]
    public int FileCount { get; set; }

    [Parameter]
    public bool IsTry { get; set; }

    [Parameter]
    public bool IsProfessional { get; set; }

    [Parameter]
    public string PageName { get; set; } = "";

    [Inject]
    public required NavigationManager NavigationManager { get; set; }
    [Inject]
    public required IJSRuntime JS { get; set; }
    [Inject]
    public required HttpClient HttpClient { get; set; }

    private MarkdownJsInterop _jsInterop = null!;
    private ElementReference TextAreaRef;
    private ElementReference MarkdownContainer;
    private DotNetObjectReference<Markdown>? objRef;
    private PinetreeView Current { get; set; } = PinetreeView.Nothing;
    private PinetreeView LastSavedState { get; set; } = PinetreeView.Nothing;
    private string Content { get; set; } = "";
    private string Title { get; set; } = "";
    private string MarkdownText { get; set; } = "";
    private IDisposable? registration;
    private bool _copyIconState = false;
    private bool _isSaving = false;
    private System.Threading.Timer? _resetIconTimer;
    private string ViewMode { get; set; } = "split";
    private bool IsSidebarOpen { get; set; } = true;
    private bool CanUndo => Current.CanUndo;
    private bool CanRedo => Current.CanRedo;

    private void ToggleSidebar()
    {
        IsSidebarOpen = !IsSidebarOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsInterop = new MarkdownJsInterop(JS);
            SetCurrent(Guid);
            registration = NavigationManager.RegisterLocationChangingHandler(OnLocationChanging);
            LastSavedState = Pinetree.DeepClone();
            objRef = DotNetObjectReference.Create(this);
            await _jsInterop.SetupAllEventListenersAsync(MarkdownContainer, TextAreaRef, objRef);
            await _jsInterop.ClearAllImagesFromIndexedDB();

            await JS.InvokeVoidAsync("initResizers");
        }
    }

    public async ValueTask DisposeAsync()
    {
        objRef?.Dispose();
        registration?.Dispose();
        _resetIconTimer?.Dispose();
        if (_jsInterop != null)
        {
            await _jsInterop.ClearAllImagesFromIndexedDB();
            await _jsInterop.DisposeAsync();
        }
    }

    [JSInvokable]
    public void HandleMarkdownLinkClick(string idString)
    {
        if (Guid.TryParse(idString, out var id))
        {
            SetCurrent(id);
        }
    }

    [JSInvokable]
    public bool HasPendingChanges()
    {
        return LastSavedState != Pinetree;
    }

    [JSInvokable]
    public async Task HandleUndoShortcut()
    {
        await UndoAsync();
    }

    [JSInvokable]
    public async Task HandleRedoShortcut()
    {
        await RedoAsync();
    }

    [JSInvokable]
    public async Task HandleDroppedFile(MarkdownJsInterop.ImageUploadResult result)
    {
        if (string.IsNullOrEmpty(result.BlobUrl)) return;


        var selection = await _jsInterop.GetSelectionAsync(TextAreaRef);

        string markdownText = $"![{result.FileName}]({result.BlobUrl})\n\n";
        await _jsInterop.ReplaceSelectionAsync(TextAreaRef, markdownText);

        int newPosition = selection.Start + markdownText.Length;
        await _jsInterop.SetCaretPositionAsync(TextAreaRef, newPosition, newPosition);

        var content = await JS.GetTextAreaValueAsync();
        UpdateContent(content);
    }

    private async Task SetViewMode(string mode)
    {
        ViewMode = mode;
        StateHasChanged();

        await JS.InvokeVoidAsync("initResizers");
    }

    private async ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (HasPendingChanges())
        {
            var confirmed = await JS.ConfirmAsync("Your changes have not been saved. Are you sure you want to leave this page?");
            if (!confirmed)
            {
                context.PreventNavigation();
            }
        }
    }

    private void OnInputTitleChange(ChangeEventArgs e)
    {
        Title = e.Value?.ToString() ?? "";
        Current.Title = Title;
        StateHasChanged();
    }

    private async Task OnInputChange(ChangeEventArgs e)
    {
        var previousContent = Content;
        var content = e.Value?.ToString() ?? "";
        if (await JS.CheckCharacterAsync(content, IsProfessional))
        {
            var maxCharacter = LimitCheckService.GetMaxCharacter(IsProfessional);
            Content = content[0..maxCharacter];
        }
        else
        {
            Content = content;
        }
        if (previousContent != Content)
        {
            Current.SaveContentToHistory(previousContent);
        }
        MarkdownText = MarkdownService.ToHtml(Content);
        Current.Content = Content;
        StateHasChanged();
    }

    private void OnFileListClick()
    {
        NavigationManager.NavigateTo($"/List");
    }

    private async Task CopyDocumentId()
    {
        try
        {
            await JS.CopyToClipboardAsync($"[{Current.Title}](//{Current.Guid})");
            _copyIconState = true;
            StateHasChanged();

            _resetIconTimer?.Dispose();
            _resetIconTimer = new System.Threading.Timer(_ =>
            {
                _copyIconState = false;
                InvokeAsync(StateHasChanged);
            }, null, 2000, Timeout.Infinite);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error copying ID: {ex.Message}");
        }
    }

    private async Task SaveChanges()
    {
        if (IsTry) return;

        try
        {
            _isSaving = true;
            if (Content.Contains("blob:"))
            {
                var updatedContent = await _jsInterop.ReplaceBlobUrlsInContentAsync(Content, Guid, TextAreaRef);

                if (updatedContent != Content)
                {
                    Content = updatedContent;
                    MarkdownText = MarkdownService.ToHtml(Content);
                    Current.Content = Content;
                }
                await ProcessAllNodesAsync(Pinetree);
                await _jsInterop.ClearAllImagesFromIndexedDB();
            }

            bool hasStructuralChanges = TreeStructureDetector.HasStructuralChanges(Pinetree, LastSavedState);

            var nodeDtos = ConvertToPineconeDtos(Pinetree);

            var request = new TreeUpdateRequest
                {
                    RootId = Pinetree.Guid,
                    HasStructuralChanges = hasStructuralChanges,
                    Nodes = hasStructuralChanges
                        ? nodeDtos
                        : GetChangedNodes(Pinetree, LastSavedState)
                };

            var response = await HttpClient.PostAsJsonAsync("/api/Pinecones/update-tree", request);
            if (response.IsSuccessStatusCode)
            {
                LastSavedState = Pinetree.DeepClone();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Error saving: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving changes: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private List<PineconeDto> ConvertToPineconeDtos(PinetreeView tree)
    {
        var result = new List<PineconeDto>();
        ConvertNodeRecursively(tree, null, result);
        return result;
    }

    private void ConvertNodeRecursively(PinetreeView node, Guid? parentGuid, List<PineconeDto> result)
    {
        var dto = new PineconeDto
            {
                Guid = node.Guid,
                Title = node.Title,
                Content = node.Content,
                GroupGuid = node.GroupGuid,
                ParentGuid = parentGuid,
                Order = GetNodeOrder(node)
            };

        result.Add(dto);

        for (int i = 0; i < node.Children.Count; i++)
        {
            ConvertNodeRecursively(node.Children[i], node.Guid, result);
        }
    }

    private int GetNodeOrder(PinetreeView node)
    {
        if (node.Parent == null) return 0;

        return node.Parent.Children.IndexOf(node);
    }

    private List<PineconeDto> GetChangedNodes(PinetreeView current, PinetreeView previous)
    {
        var changedNodes = new List<PineconeDto>();
        var previousNodeMap = IndexNodes(previous);

        FindChangedNodesRecursive(current, Guid.Empty, previousNodeMap, changedNodes);

        return changedNodes;
    }

    private Dictionary<Guid, (PinetreeView Node, int Order)> IndexNodes(PinetreeView tree)
    {
        var result = new Dictionary<Guid, (PinetreeView Node, int Order)>();
        IndexNodesRecursive(tree, result);
        return result;
    }

    private void IndexNodesRecursive(PinetreeView node, Dictionary<Guid, (PinetreeView Node, int Order)> nodeMap)
    {
        nodeMap[node.Guid] = (node, GetNodeOrder(node));

        foreach (var child in node.Children)
        {
            IndexNodesRecursive(child, nodeMap);
        }
    }

    private void FindChangedNodesRecursive(
        PinetreeView node,
        Guid parentGuid,
        Dictionary<Guid, (PinetreeView Node, int Order)> previousNodeMap,
        List<PineconeDto> changedNodes)
    {
        int currentOrder = GetNodeOrder(node);
        bool isChanged = false;

        if (previousNodeMap.TryGetValue(node.Guid, out var previousInfo))
        {
            var (previousNode, previousOrder) = previousInfo;

            isChanged = node.Title != previousNode.Title ||
                        node.Content != previousNode.Content ||
                        parentGuid != (previousNode.Parent?.Guid) ||
                        currentOrder != previousOrder;
        }
        else
        {
            isChanged = true;
        }

        if (isChanged)
        {
            changedNodes.Add(new PineconeDto
                {
                    Guid = node.Guid,
                    Title = node.Title,
                    Content = node.Content,
                    GroupGuid = node.GroupGuid,
                    ParentGuid = parentGuid,
                    Order = currentOrder
                });
        }

        for (int i = 0; i < node.Children.Count; i++)
        {
            FindChangedNodesRecursive(node.Children[i], node.Guid, previousNodeMap, changedNodes);
        }
    }

    private async Task ProcessAllNodesAsync(PinetreeView node)
    {
        if (node.Content.Contains("blob:"))
        {
            var updatedContent = await _jsInterop.ReplaceBlobUrlsInContentAsync(node.Content, node.Guid);
            if (updatedContent != node.Content)
            {
                node.Content = updatedContent;
            }
        }

        foreach (var child in node.Children)
        {
            await ProcessAllNodesAsync(child);
        }
    }

    private void SetCurrent(Guid guid)
    {
        int fileCount = 0;
        var hit = Pinetree.SetCurrentIncludeChild(guid, ref fileCount, 1);
        if (hit == null) return;

        Current = hit;
        Guid = guid;
        FileCount = fileCount;
        Title = Current.Title;
        Content = Current.Content;
        MarkdownText = MarkdownService.ToHtml(Content);
        StateHasChanged();
    }

    private async Task ExtractToChildFile()
    {
        try
        {
            var selection = await _jsInterop.GetSelectionAsync(TextAreaRef);
            if (string.IsNullOrEmpty(selection.Text)) return;

            var defaultChildTitle = MarkdownUtil.GetChildTitle(selection.Text);
            var childTitle = await JS.PromptAsync("Enter your title", defaultChildTitle);
            if (string.IsNullOrWhiteSpace(childTitle)) return;
            var childId = await MarkdownUtil.AddChildAsync(Current, childTitle, selection.Text, JS, HttpClient, IsTry, IsProfessional);
            var linkText = $"[{childTitle}](//{childId})";
            await _jsInterop.ReplaceSelectionAsync(TextAreaRef, linkText);
            Current.Content = await JS.GetTextAreaValueAsync();
            SetCurrent(Guid);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating child file: {ex.Message}");
        }
    }

    private async Task FormatText(string prefix, string suffix)
    {
        var selection = await _jsInterop.GetSelectionAsync(TextAreaRef);
        if (selection.Text.Length > 0)
        {
            await _jsInterop.ReplaceSelectionAsync(TextAreaRef, $"{prefix}{selection.Text}{suffix}");
        }
        else
        {
            await _jsInterop.ReplaceSelectionAsync(TextAreaRef, $"{prefix}{suffix}");
        }
        int start = selection.Start;
        await _jsInterop.SetCaretPositionAsync(TextAreaRef, start + prefix.Length, start + prefix.Length);
        var content = await JS.GetTextAreaValueAsync();
        UpdateContent(content);
    }

    private async Task InsertList(string prefix)
    {
        var selection = await _jsInterop.GetSelectionAsync(TextAreaRef);
        string result;
        var lines = selection.Text.Split('\n');
        if (selection.Text.Length > 0)
        {
            result = string.Join("\n", lines.Select(line => $"{prefix}{line}"));
        }
        else
        {
            result = $"{prefix}";
        }
        await _jsInterop.ReplaceSelectionAsync(TextAreaRef, result);
        var newCaretPosition = selection.End + prefix.Length * lines.Length;
        await _jsInterop.SetCaretPositionAsync(TextAreaRef, newCaretPosition, newCaretPosition);

        var content = await JS.GetTextAreaValueAsync();
        UpdateContent(content);
    }

    private async Task InsertLink()
    {
        var selection = await _jsInterop.GetSelectionAsync(TextAreaRef);
        if (selection.Text.Length > 0)
        {
            await _jsInterop.ReplaceSelectionAsync(TextAreaRef, $"[{selection.Text}](https://)");
        }
        else
        {
            await _jsInterop.ReplaceSelectionAsync(TextAreaRef, $"[](https://)");
        }
        int start = selection.Start;
        await _jsInterop.SetCaretPositionAsync(TextAreaRef, start + 1, start + 1);
        var content = await JS.GetTextAreaValueAsync();
        UpdateContent(content);
    }

    private async Task InsertImage()
    {
        try
        {
            var selection = await _jsInterop.GetSelectionAsync(TextAreaRef);
            var result = await _jsInterop.OpenFileDialogAndGetBlobUrlAsync();
            if (!string.IsNullOrEmpty(result.BlobUrl))
            {
                await _jsInterop.ReplaceSelectionAsync(TextAreaRef, $"![{result.FileName}]({result.BlobUrl})");

                int start = selection.Start;
                await _jsInterop.SetCaretPositionAsync(TextAreaRef, start + 2, start + 2 + result.FileName.Length);
            }
            else
            {
                if (selection.Text.Length > 0)
                {
                    await _jsInterop.ReplaceSelectionAsync(TextAreaRef, $"![{selection.Text}](https://)");
                }
                else
                {
                    await _jsInterop.ReplaceSelectionAsync(TextAreaRef, $"![](https://)");
                }

                int start = selection.Start;
                await _jsInterop.SetCaretPositionAsync(TextAreaRef, start + 2, start + 2);
            }
            var content = await JS.GetTextAreaValueAsync();
            UpdateContent(content);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message);
        }
    }

    private async Task InsertGrid()
    {
        var selection = await _jsInterop.GetSelectionAsync(TextAreaRef);
        await _jsInterop.ReplaceSelectionAsync(TextAreaRef, $"{selection.Text}\n| Column 1 | Column 2 | Column 3 |\n| --- | --- | --- |\n| text | text | text |\n");
        int end = selection.End;
        await _jsInterop.SetCaretPositionAsync(TextAreaRef, end, end);
        var content = await JS.GetTextAreaValueAsync();
        UpdateContent(content);
    }

    private async Task InsertLine()
    {
        var selection = await _jsInterop.GetSelectionAsync(TextAreaRef);
        await _jsInterop.ReplaceSelectionAsync(TextAreaRef, $"{selection.Text}\n---\n");
        int end = selection.End;
        await _jsInterop.SetCaretPositionAsync(TextAreaRef, end, end);
        var content = await JS.GetTextAreaValueAsync();
        UpdateContent(content);
    }

    private async Task UndoAsync()
    {
        string? newContent = Current.Undo();
        if (newContent == null) return;

        Content = newContent;
        MarkdownText = MarkdownService.ToHtml(Content);
        await _jsInterop.SetTextAreaValueAsync(TextAreaRef, Content, true);
        StateHasChanged();
    }

    private async Task RedoAsync()
    {
        string? newContent = Current.Redo();
        if (newContent == null) return;

        Content = newContent;
        MarkdownText = MarkdownService.ToHtml(Content);
        await _jsInterop.SetTextAreaValueAsync(TextAreaRef, Content, true);
        StateHasChanged();
    }

    private void UpdateContent(string content)
    {
        Content = content;
        MarkdownText = MarkdownService.ToHtml(Content);
        Current.Content = Content;
        StateHasChanged();
    }
}
