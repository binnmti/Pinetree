@using Pinetree.Client.Model
@using Pinetree.Client.Services
@implements IAsyncDisposable

<div class="editor-container">
    @if (IsTry)
    {
        <div class="row">
            <div class="col">
                <div class="alert alert-primary" role="alert">
                    <i class="bi bi-info-circle-fill"></i>
                    If you want to create multiple files, please <a href="Account/Register" class="alert-link">register</a>.
                </div>
            </div>
        </div>
    }
    <div class="row">
        <div class="col-2 border">
            <div class="pinetree-view" style="display: flex; flex-direction: column; height: 100%;">
                <div class="list-group" style="flex: 1 1 auto; display: flex; flex-direction: column;">
                    @if (!IsTry)
                    {
                        <div>
                            <button type="button" class="list-group-item list-group-item-action" @onclick="OnFileListClick">
                                <i class="bi bi-card-list" aria-hidden="true"></i> File List
                            </button>
                        </div>
                    }
                    <div>
                        <PinetreeView Pinetree="@Pinetree" Id="@Id" IsTry=@IsTry IsProfessional=IsProfessional OnChildEvent ="SetCurrent" />
                    </div>
                </div>
            </div>
            <div class="py-2">
                FileCount : @FileCount
            </div>
        </div>
        <div class="col-10">
            <div class="markdown-title">
                <input @bind="@(Title)" @oninput="OnInputTitleChange" placeholder="Untitled" style="width:100%" />
            </div>
            <div class="toolbar">
                <button class="btn btn-sm btn-outline-secondary" @onclick="ExtractToChildFile" title="Move selected text to child file">
                    <i class="bi bi-file-earmark-arrow-down"></i>
                </button>
            </div>
            <div class="row" style="height:@(IsTry ? "80vh" : "87vh");">
                <div class="col py-2">
                    <textarea @ref="TextAreaRef" @bind="@(Content)" class="no-resize" style="width:100%; height:101%; overflow:auto" @oninput="OnInputChange" placeholder="Write your markdown here..."></textarea>
                    <div class="counter">@Content.Length characters</div>
                </div>
                <div class="col py-2" style="height: 100%; overflow: hidden;">
                    <div class="border" style="width:100%; height:101%; overflow:auto;" @ref="MarkdownContainer">
                        @((MarkupString)MarkdownText)
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public long Id { get; set; }

    [Parameter]
    public Pinetree Pinetree { get; set; } = Pinetree.Nothing;

    [Parameter]
    public int FileCount { get; set; }

    [Parameter]
    public bool IsTry { get; set; }

    [Parameter]
    public bool IsProfessional { get; set; }

    [Parameter]
    public string PageName { get; set; } = "";

    [Inject]
    public required NavigationManager NavigationManager { get; set; }
    [Inject]
    public required IJSRuntime JS { get; set; }
    [Inject]
    public required HttpClient HttpClient { get; set; }

    private ElementReference TextAreaRef;
    private ElementReference MarkdownContainer;
    private DotNetObjectReference<Markdown>? objRef;
    private JsInterop? _jsInterop;
    private Pinetree Current { get; set; } = Pinetree.Nothing;
    private string Content { get; set; } = "";
    private string Title { get; set; } = "";
    private string MarkdownText { get; set; } = "";

    private System.Threading.Timer? _debounceTimer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SetCurrent(Id);
            _jsInterop = new JsInterop(JS);
            objRef = DotNetObjectReference.Create(this);
            if (_jsInterop != null && MarkdownContainer.Id != null)
            {
                await _jsInterop.SetupLinkInterceptorAsync(MarkdownContainer, objRef);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        objRef?.Dispose();
        _debounceTimer?.Dispose();
        if (_jsInterop != null)
        {
            await ((IAsyncDisposable)_jsInterop).DisposeAsync();
        }
    }


    [JSInvokable]
    public void HandleMarkdownLinkClick(string idString)
    {
        if (long.TryParse(idString, out long id))
        {
            SetCurrent(id);
        }
    }

    private void OnInputTitleChange(ChangeEventArgs e)
    {
        Title = e.Value?.ToString() ?? "";
        Current.Title = Title;
        DebounceSave();
        StateHasChanged();
    }

    private async Task OnInputChange(ChangeEventArgs e)
    {
        var content = e.Value?.ToString() ?? "";
        if (await JS.CheckCharacterAsync(content, IsProfessional))
        {
            Content = content[0..999];
        }
        else
        {
            Content = content;
        }
        MarkdownText = MarkdownService.ToHtml(Content);
        Current.Content = Content;
        DebounceSave();
        StateHasChanged();
    }

    private void OnFileListClick()
    {
        NavigationManager.NavigateTo($"/List");
    }

    private async Task ExtractToChildFile()
    {
        if (_jsInterop == null) return;

        try
        {
            var selection = await _jsInterop.GetSelectionAsync(TextAreaRef);
            if (string.IsNullOrEmpty(selection.Text)) return;
            if (IsTry)
            {
                await JS.InvokeVoidAsync("alert", $"If you are trying out the trial version, the link to your child will not work even if you click on the link. Please Register.");
            }

            var childTitle = MarkdownUtil.GetChildTitle(selection.Text);
            var childId = await MarkdownUtil.AddChildAsync(Current, childTitle, selection.Text, JS, HttpClient, IsTry, IsProfessional);
            var linkText = $"[{childTitle}](/Edit/{childId})";
            await _jsInterop.ReplaceSelectionAsync(TextAreaRef, linkText);
            Current.Content = await JS.InvokeAsync<string>("eval", $"document.querySelector('textarea').value");
            SetCurrent(Id);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating child file: {ex.Message}");
        }
    }

    private void DebounceSave()
    {
        if (IsTry) return;

        _debounceTimer?.Dispose();
        _debounceTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                try
                {
                    var updateData = new
                    {
                        Id,
                        Title,
                        Content,
                        GroupId = -1,
                        ParentId = -1,
                    };
                    await HttpClient.PostAsJsonAsync($"/api/Pinecones/update", updateData);
                    await InvokeAsync(StateHasChanged);
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Task was canceled: {ex.Message}");
                }
            });
        }, null, 500, Timeout.Infinite);
    }

    private void SetCurrent(long id)
    {
        Id = id;
        int fileCount = 0;
        Current = Pinetree.SetCurrentIncludeChild(id, ref fileCount, 1);
        FileCount = fileCount;
        Title = Current.Title;
        Content = Current.Content;
        MarkdownText = MarkdownService.ToHtml(Content);
        StateHasChanged();
    }
}
