@using Pinetree.Client.ViewModels
@using Pinetree.Client.Services
@using Pinetree.Client.Pages.Components
@using Pinetree.Shared.ViewModels
@using System.Text
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Routing

@implements IAsyncDisposable

<div class="resizable-page">
    @if (IsTry)
    {
        <div class="description-bar">
            <div class="alert alert-primary" role="alert">
                <i class="bi bi-info-circle-fill"></i>
                If you want to save your content or create multiple files, please <a href="Account/Register" class="alert-link">register</a>.
            </div>
        </div>
    }
    else if (!IsPublicView)
    {
        <div class="description-bar">
            <div class="alert alert-primary" role="alert">
                <i class="bi bi-info-circle-fill"></i>
                Since it is currently in beta version, there is no function such as temporary saving. If you are writing long texts, we recommend saving regularly to avoid malfunction.
            </div>
        </div>
    }
    <div class="panels-section">
        <div class="panels-row">
            <div id="panel1" class="panel">
                <div class="panel-content-wrapper">
                    <div class="panel-header">
                    </div>
                    <div class="panel-content">
                        <div>
                            <div class="pinetree-view">
                                <div class="list-group">
                                    @if (!IsTry && !IsPublicView)
                                    {
                                        <div>
                                            <button type="button" class="list-group-item list-group-item-action" @onclick="OnFileListClick">
                                                <i class="bi bi-arrow-90deg-up me-1" aria-hidden="true"></i>
                                                <i class="bi bi-card-list" aria-hidden="true"></i>
                                                User
                                            </button>
                                        </div>
                                    }
                                    <div>
                                        <TreeView Pinetree="@Pinetree" Guid="@Guid" IsTry=@IsTry IsProfessional=IsProfessional OnChildEvent="SetCurrent" IsPublicView="@IsPublicView" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="panel-footer">
                        <div>
                            FileCount : @FileCount
                        </div>
                    </div>
                </div>
            </div>

            <div class="resizer" id="resizer1"></div>

            <div class="right-panels p-3">
                <div class="common-header @(IsPublicView ? "public-view-header" : "")">
                    <div class="markdown-title d-flex align-items-center @(IsPublicView ? "public-view-title" : "")">
                        @if (IsPublicView)
                        {
                            <div class="public-title-container">
                                <div class="public-user-name">@User</div>
                                <h1>@Title</h1>
                                <div class="public-dates">
                                    <div class="public-date">Created: @Current.Create.ToString("MMM dd, yyyy")</div>
                                    @if (Current.Update != Current.Create)
                                    {
                                        <div class="public-date">Updated: @Current.Update.ToString("MMM dd, yyyy")</div>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <input @bind="@(Title)" @oninput="OnInputTitleChange" placeholder="Untitled" class="mx-1 flex-grow-1" />
                        }
                        <div class="d-flex align-items-center ms-2">
                            @if (!IsPublicView)
                            {
                                <button @onclick="SaveChanges" disabled="@(!HasPendingChanges() || IsTry || _isSaving)"
                                        class="btn btn-sm btn-primary me-2" title="Save changes">
                                    @if (_isSaving)
                                    {
                                        <span class="d-flex align-items-center">
                                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                            <span>Saving...</span>
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="d-flex align-items-center">
                                            <i class="bi bi-save me-1"></i>
                                            <span>Save</span>
                                        </span>
                                    }
                                </button>
                            }
                        </div>
                    </div>
                    @if (!IsPublicView)
                    {
                        <div class="markdown-toolbar">
                            <MarkdownToolbar CanUndo="@CanUndo"
                                             CanRedo="@CanRedo"
                                             IsTry="@IsTry"
                                             ViewMode="@ViewMode"
                                             CopyIconState="@_copyIconState"
                                             CurrentGuid="@Current.Guid"
                                             OnExtractToChildFile="@ExtractToChildFile"
                                             OnUndo="@UndoAsync"
                                             OnRedo="@RedoAsync"
                                             OnFormatText="@HandleFormatText"
                                             OnInsertList="@HandleInsertList"
                                             OnDecreaseIndent="@DecreaseIndent"
                                             OnIncreaseIndent="@IncreaseIndent"
                                             OnInsertLink="@InsertLink"
                                             OnInsertImage="@InsertImage"
                                             OnInsertVideo="@InsertYouTubeVideo"
                                             OnInsertGrid="@InsertGrid"
                                             OnInsertLine="@InsertLine"
                                             OnInsertEmoji="@InsertEmoji"
                                             OnAutoInsertEmoji="@AutoInsertEmoji"
                                             OnSetViewMode="@HandleSetViewMode"
                                             OnCopyDocumentId="@CopyDocumentId"
                                             OnFontSettingsChanged="@OnFontSettingsChanged" />

                        </div>
                    }
                </div>
                <div class="right-panels-container">
                    @if (!IsPublicView)
                    {
                        <div id="panel2" class="panel"
                             style="display: @(ViewMode == "edit" || ViewMode == "split" ? "flex" : "none");
                                                                @(ViewMode == "edit" ? "flex: 1 !important; width: 100% !important;" : "")">
                            <div class="panel-content-wrapper">
                                <div class="panel-content">
                                    <textarea @ref="TextAreaRef" @bind="@(Content)" class="no-resize"
                                              style="width:100%; height:99%; padding-bottom: 50vh; box-sizing: border-box; font-family: @_currentFontFamily; font-size: @(_currentFontSize)px;"
                                              @oninput="OnInputChange" placeholder="Write your markdown here..."></textarea>
                                </div>
                                <div class="panel-footer">
                                    <div class="counter">@GetMarkdownContentCharacterCount() characters (content)</div>
                                </div>
                            </div>
                        </div>
                        <div class="resizer" id="resizer2" style="display: @(ViewMode == "split" ? "block" : "none")"></div>
                    }
                    <div id="panel3" class="panel" style="display: @(IsPublicView || ViewMode == "preview" || ViewMode == "split" ? "flex" : "none"); @(IsPublicView ? "flex: 1 !important; width: 100% !important;" : "")">
                        <div class="panel-content-wrapper">
                            <div class="panel-content @(IsPublicView || ViewMode == "preview" ? "public-view-content" : "")">
                                <div @ref="MarkdownContainer"
                                     class="border markdown-body p-3 @(IsPublicView || ViewMode == "preview" ? "public-view-container" : "")"
                                     style="width:100%; height:99%; overflow:auto;">
                                    @((MarkupString)MarkdownText)
                                </div>
                            </div>
                            <div class="panel-footer">
                                <div class="counter">@GetPlainTextCharacterCount() characters (preview)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (_isEmojiPickerVisible)
{
    <EmojiPicker EmojiCategories="_allEmojis" OnSelect="OnEmojiSelected" />
}

@code {
    [Parameter]
    public Guid Guid { get; set; }

    [Parameter]
    public PinetreeView Pinetree { get; set; } = PinetreeView.Nothing;

    [Parameter]
    public int FileCount { get; set; }

    [Parameter]
    public bool IsTry { get; set; }

    [Parameter]
    public bool IsProfessional { get; set; }

    [Parameter]
    public string PageName { get; set; } = "";

    [Parameter]
    public bool IsPublicView { get; set; } = false;

    [Parameter]
    public string User { get; set; } = "";

    [Inject]
    public required NavigationManager NavigationManager { get; set; }
    [Inject]
    public required IJSRuntime JS { get; set; }
    [Inject]
    public required HttpClient HttpClient { get; set; }
    [Inject]
    public required FontSettingsService FontSettingsService { get; set; }
    private IJSObjectReference _jsModule = null!;
    private ElementReference TextAreaRef;
    private ElementReference MarkdownContainer;
    private DotNetObjectReference<Markdown>? objRef;
    private bool _isDisposed = false;
    private PinetreeView Current { get; set; } = PinetreeView.Nothing;
    private PinetreeView LastSavedState { get; set; } = PinetreeView.Nothing;
    private string Content { get; set; } = "";
    private string Title { get; set; } = "";
    private string MarkdownText { get; set; } = "";
    private IDisposable? registration;
    private bool _copyIconState = false;
    private bool _isSaving = false;
    private System.Threading.Timer? _resetIconTimer;
    private string ViewMode { get; set; } = "split";
    private bool IsSidebarOpen { get; set; } = true;
    private bool CanUndo => Current.CanUndo;
    private bool CanRedo => Current.CanRedo;
    private bool _isEmojiPickerVisible = false;
    private Dictionary<string, string[]> _allEmojis = new();
    private string _currentFontFamily = "system-ui, -apple-system, sans-serif";
    private int _currentFontSize = 14;


    private void ToggleSidebar()
    {
        IsSidebarOpen = !IsSidebarOpen;
    }

    protected override void OnInitialized()
    {
        SetCurrent(Guid);
        LastSavedState = Pinetree.DeepClone();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Components/Markdown.razor.js");
            registration = NavigationManager.RegisterLocationChangingHandler(OnLocationChanging);
            objRef = DotNetObjectReference.Create(this);

            // Initialize font settings
            try
            {
                _currentFontFamily = await FontSettingsService.GetFontFamilyAsync();
                _currentFontSize = await FontSettingsService.GetFontSizeAsync();
            }
            catch (JSException jsEx)
            {
                Console.WriteLine($"JavaScript error initializing font settings: {jsEx.Message}");
                _currentFontFamily = "system-ui, -apple-system, sans-serif";
                _currentFontSize = 14;
            }
            catch (JSDisconnectedException jsDisconnectedEx)
            {
                Console.WriteLine($"JavaScript runtime disconnected while initializing font settings: {jsDisconnectedEx.Message}");
                _currentFontFamily = "system-ui, -apple-system, sans-serif";
                _currentFontSize = 14;
            }
            catch (InvalidOperationException invOpEx) when (invOpEx.Message.Contains("JavaScript"))
            {
                Console.WriteLine($"JavaScript not available while initializing font settings: {invOpEx.Message}");
                _currentFontFamily = "system-ui, -apple-system, sans-serif";
                _currentFontSize = 14;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to initialize font settings: {ex.Message}");
                _currentFontFamily = "system-ui, -apple-system, sans-serif";
                _currentFontSize = 14;
            }

            if (IsPublicView)
            {
                await _jsModule.InvokeVoidAsync("setupMarkdownClickListener", MarkdownContainer, objRef);
            }
            else
            {
                await _jsModule.InvokeVoidAsync("setupAllEventListeners", MarkdownContainer, TextAreaRef, objRef);
                await _jsModule.InvokeVoidAsync("clearAllImagesFromIndexedDB");
            }
            await _jsModule.InvokeVoidAsync("initResizers");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_isDisposed) return; // Prevent multiple disposal
        _isDisposed = true;

        try
        {
            // Cleanup JavaScript event handlers first, before disposing objRef
            if (objRef != null && _jsModule != null)
            {
                try
                {
                    await _jsModule.InvokeVoidAsync("cleanupNavigationHandlers", objRef);
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error cleaning up navigation handlers: {ex.Message}");
                }
            }

            // Dispose registration first
            registration?.Dispose();
            _resetIconTimer?.Dispose();

            // Clear JS resources before disposing objRef
            if (_jsModule != null)
            {
                try
                {
                    await _jsModule.InvokeVoidAsync("clearAllImagesFromIndexedDB");
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error clearing images from IndexedDB: {ex.Message}");
                }

                try
                {
                    await _jsModule.DisposeAsync();
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error disposing JS interop: {ex.Message}");
                }
            }

            // Dispose objRef last
            objRef?.Dispose();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error during DisposeAsync: {ex.Message}");
        }
    }

    [JSInvokable]
    public void HandleMarkdownLinkClick(string idString)
    {
        try
        {
            if (_isDisposed) return;
            if (Guid.TryParse(idString, out var id))
            {
                SetCurrent(id);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error handling markdown link click: {ex.Message}");
        }
    }

    [JSInvokable]
    public bool HasPendingChanges()
    {
        try
        {
            if (_isDisposed)
            {
                Console.WriteLine("HasPendingChanges called on disposed component, returning false");
                return false;
            }

            if (Pinetree == null || LastSavedState == null)
            {
                return false;
            }

            return LastSavedState != Pinetree;
        }
        catch (ObjectDisposedException)
        {
            Console.WriteLine("ObjectDisposedException in HasPendingChanges, returning false");
            return false; // Component is disposed, no pending changes
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error checking pending changes: {ex.Message}");
            return false; // On error, assume no pending changes
        }
    }

    [JSInvokable]
    public async Task HandleUndoShortcut()
    {
        try
        {
            if (_isDisposed) return;
            await UndoAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error handling undo shortcut: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task HandleRedoShortcut()
    {
        try
        {
            if (_isDisposed) return;
            await RedoAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error handling redo shortcut: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task HandleDroppedFile(ImageUploadResult result)
    {
        if (string.IsNullOrEmpty(result.BlobUrl)) return;

        var selection = await _jsModule.InvokeAsync<TextSelection>("getTextAreaSelection", TextAreaRef);

        string markdownText = $"![{result.FileName}]({result.BlobUrl})\n\n";
        await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, markdownText);

        int newPosition = selection.Start + markdownText.Length;
        await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, newPosition, newPosition);

        var content = await JS.GetTextAreaValueAsync();
        UpdateContent(content);
    }

    private async Task SetViewMode(string mode)
    {
        ViewMode = mode;
        StateHasChanged();

        await _jsModule.InvokeVoidAsync("initResizers");
    }

    private async ValueTask OnLocationChanging(LocationChangingContext context)
    {
        try
        {
            if (HasPendingChanges())
            {
                var isInternalNavigation = context.TargetLocation.StartsWith(NavigationManager.BaseUri);
                if (isInternalNavigation)
                {
                    var confirmed = await JS.ConfirmAsync("Your changes have not been saved. Are you sure you want to leave this page?");
                    if (!confirmed)
                    {
                        context.PreventNavigation();
                    }
                }
            }
        }
        catch (ObjectDisposedException)
        {
            // Component is already disposed, allow navigation
        }
        catch (JSDisconnectedException)
        {
            // JavaScript runtime is disconnected, allow navigation
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in OnLocationChanging: {ex.Message}");
            // Allow navigation on error to prevent infinite loops
        }
    }

    private void OnInputTitleChange(ChangeEventArgs e)
    {
        Title = e.Value?.ToString() ?? "";
        Current.Title = Title;
        StateHasChanged();
    }

    private void OnInputChange(ChangeEventArgs e)
    {
        var previousContent = Content;
        var content = e.Value?.ToString() ?? "";
        Content = content;
        if (previousContent != Content)
        {
            Current.SaveContentToHistory(previousContent);
        }
        MarkdownText = MarkdownService.ToHtml(Content);
        Current.Content = Content;
        StateHasChanged();
    }

    private void OnFileListClick()
    {
        NavigationManager.NavigateTo($"/User");
    }

    private async Task CopyDocumentId()
    {
        try
        {
            await JS.CopyToClipboardAsync($"[{Current.Title}](//{Current.Guid})");
            _copyIconState = true;
            StateHasChanged();

            _resetIconTimer?.Dispose();
            _resetIconTimer = new System.Threading.Timer(_ =>
            {
                _copyIconState = false;
                InvokeAsync(StateHasChanged);
            }, null, 2000, Timeout.Infinite);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error copying ID: {ex.Message}");
        }
    }
    private async Task SaveChanges()
    {
        if (IsTry) return;

        // Use markdown content character count (excluding markup) for limit check
        var contentCharacterCount = GetMarkdownContentCharacterCount();
        if (await LimitCheckService.CheckMarkdownContentCharacterAsync(JS, contentCharacterCount, IsProfessional)) return;

        try
        {
            _isSaving = true;
            if (Content.Contains("blob:"))
            {
                var updatedContent = await _jsModule.InvokeAsync<string>("replaceBlobUrlsInContent", Content, Guid.ToString(), TextAreaRef);

                if (updatedContent != Content)
                {
                    Content = updatedContent;
                    MarkdownText = MarkdownService.ToHtml(Content);
                    Current.Content = Content;
                }
                await ProcessAllNodesAsync(Pinetree);
                await _jsModule.InvokeVoidAsync("clearAllImagesFromIndexedDB");
            }

            bool hasStructuralChanges = TreeStructureDetector.HasStructuralChanges(Pinetree, LastSavedState);

            var nodeDtos = ConvertToPineconeDtos(Pinetree);

            var request = new TreeUpdateRequest
            {
                RootId = Pinetree.Guid,
                HasStructuralChanges = hasStructuralChanges,
                Nodes = hasStructuralChanges
                        ? nodeDtos
                        : GetChangedNodes(Pinetree, LastSavedState)
            };

            var response = await HttpClient.PostAsJsonAsync("/api/Pinecones/update-tree", request);
            if (response.IsSuccessStatusCode)
            {
                LastSavedState = Pinetree.DeepClone();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Error saving: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving changes: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private List<PineconeUpdateRequest> ConvertToPineconeDtos(PinetreeView tree)
    {
        var result = new List<PineconeUpdateRequest>();
        ConvertNodeRecursively(tree, null, result);
        return result;
    }

    private void ConvertNodeRecursively(PinetreeView node, Guid? parentGuid, List<PineconeUpdateRequest> result)
    {
        var dto = new PineconeUpdateRequest
        {
            Guid = node.Guid,
            Title = node.Title,
            Content = node.Content,
            GroupGuid = node.GroupGuid,
            ParentGuid = parentGuid,
            Order = GetNodeOrder(node),
            IsPublic = node.IsPublic
        };

        result.Add(dto);

        for (int i = 0; i < node.Children.Count; i++)
        {
            ConvertNodeRecursively(node.Children[i], node.Guid, result);
        }
    }

    private int GetNodeOrder(PinetreeView node)
    {
        if (node.Parent == null) return 0;

        return node.Parent.Children.IndexOf(node);
    }

    private List<PineconeUpdateRequest> GetChangedNodes(PinetreeView current, PinetreeView previous)
    {
        var changedNodes = new List<PineconeUpdateRequest>();
        var previousNodeMap = IndexNodes(previous);

        FindChangedNodesRecursive(current, Guid.Empty, previousNodeMap, changedNodes);

        return changedNodes;
    }

    private Dictionary<Guid, (PinetreeView Node, int Order)> IndexNodes(PinetreeView tree)
    {
        var result = new Dictionary<Guid, (PinetreeView Node, int Order)>();
        IndexNodesRecursive(tree, result);
        return result;
    }

    private void IndexNodesRecursive(PinetreeView node, Dictionary<Guid, (PinetreeView Node, int Order)> nodeMap)
    {
        nodeMap[node.Guid] = (node, GetNodeOrder(node));

        foreach (var child in node.Children)
        {
            IndexNodesRecursive(child, nodeMap);
        }
    }

    private void FindChangedNodesRecursive(
        PinetreeView node,
        Guid parentGuid,
        Dictionary<Guid, (PinetreeView Node, int Order)> previousNodeMap,
        List<PineconeUpdateRequest> changedNodes)
    {
        int currentOrder = GetNodeOrder(node);
        bool isChanged = false;

        if (previousNodeMap.TryGetValue(node.Guid, out var previousInfo))
        {
            var (previousNode, previousOrder) = previousInfo;

            isChanged = node.Title != previousNode.Title ||
                        node.Content != previousNode.Content ||
                        parentGuid != (previousNode.Parent?.Guid) ||
                        currentOrder != previousOrder;
        }
        else
        {
            isChanged = true;
        }

        if (isChanged)
        {
            changedNodes.Add(new PineconeUpdateRequest
            {
                Guid = node.Guid,
                Title = node.Title,
                Content = node.Content,
                GroupGuid = node.GroupGuid,
                ParentGuid = parentGuid,
                Order = currentOrder,
                IsPublic = node.IsPublic
            });
        }

        for (int i = 0; i < node.Children.Count; i++)
        {
            FindChangedNodesRecursive(node.Children[i], node.Guid, previousNodeMap, changedNodes);
        }
    }

    private async Task ProcessAllNodesAsync(PinetreeView node)
    {
        if (node.Content.Contains("blob:"))
        {
            var updatedContent = await _jsModule.InvokeAsync<string>("replaceBlobUrlsInContent", node.Content, node.Guid.ToString());
            if (updatedContent != node.Content)
            {
                node.Content = updatedContent;
            }
        }

        foreach (var child in node.Children)
        {
            await ProcessAllNodesAsync(child);
        }
    }

    private void SetCurrent(Guid guid)
    {
        int fileCount = 0;
        var hit = Pinetree.SetCurrentIncludeChild(guid, ref fileCount, 1);
        if (hit == null) return;

        Current = hit;
        Guid = guid;
        FileCount = fileCount;
        Title = Current.Title;
        Content = Current.Content;
        MarkdownText = MarkdownService.ToHtml(Content);
        StateHasChanged();
    }

    private async Task ExtractToChildFile()
    {
        try
        {
            var selection = await _jsModule.InvokeAsync<TextSelection>("getTextAreaSelection", TextAreaRef);
            if (string.IsNullOrEmpty(selection.Text)) return;

            var defaultChildTitle = MarkdownUtil.GetChildTitle(selection.Text);
            var childTitle = await JS.PromptAsync("Enter your title", defaultChildTitle);
            if (string.IsNullOrWhiteSpace(childTitle)) return;
            var childId = await MarkdownUtil.AddChildAsync(Current, childTitle, selection.Text, JS, HttpClient, IsTry, IsProfessional);
            var linkText = $"[{childTitle}](//{childId})";
            await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, linkText);
            Current.Content = await JS.GetTextAreaValueAsync();
            SetCurrent(Guid);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating child file: {ex.Message}");
        }
    }
    private async Task FormatText(string prefix, string suffix)
    {
        var selection = await _jsModule.InvokeAsync<TextSelection>("getTextAreaSelection", TextAreaRef);
        if (selection.Text.Length > 0)
        {
            // Trim whitespace from the selected text and preserve it outside the formatting
            var trimmedText = selection.Text.Trim();
            var leadingWhitespace = selection.Text.Substring(0, selection.Text.Length - selection.Text.TrimStart().Length);
            var trailingWhitespace = selection.Text.Substring(selection.Text.TrimEnd().Length);

            var formattedText = $"{leadingWhitespace}{prefix}{trimmedText}{suffix}{trailingWhitespace}";
            await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, formattedText);

            // Position cursor after the prefix, inside the formatting
            int newStart = selection.Start + leadingWhitespace.Length + prefix.Length;
            int newEnd = newStart + trimmedText.Length;
            await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, newStart, newEnd);
        }
        else
        {
            await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, $"{prefix}{suffix}");
            int start = selection.Start;
            await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, start + prefix.Length, start + prefix.Length);
        }
        var content = await JS.GetTextAreaValueAsync();
        UpdateContent(content);
    }

    private async Task InsertList(string prefix)
    {
        var selection = await _jsModule.InvokeAsync<TextSelection>("getTextAreaSelection", TextAreaRef);
        string result;
        var lines = selection.Text.Split('\n');
        if (selection.Text.Length > 0)
        {
            result = string.Join("\n", lines.Select(line => $"{prefix}{line}"));
        }
        else
        {
            result = $"{prefix}";
        }
        await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, result);
        var newCaretPosition = selection.End + prefix.Length * lines.Length;
        await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, newCaretPosition, newCaretPosition);

        var content = await JS.GetTextAreaValueAsync();
        UpdateContent(content);
    }

    private async Task InsertLink()
    {
        var selection = await _jsModule.InvokeAsync<TextSelection>("getTextAreaSelection", TextAreaRef);
        if (selection.Text.Length > 0)
        {
            await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, $"[{selection.Text}](https://)");
        }
        else
        {
            await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, $"[](https://)");
        }
        int start = selection.Start;
        await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, start + 1, start + 1);
        var content = await JS.GetTextAreaValueAsync();
        UpdateContent(content);
    }

    private async Task InsertImage()
    {
        try
        {
            var selection = await _jsModule.InvokeAsync<TextSelection>("getTextAreaSelection", TextAreaRef);
            var result = await _jsModule.InvokeAsync<ImageUploadResult>("openFileDialogAndGetBlobUrl");
            if (!string.IsNullOrEmpty(result.BlobUrl))
            {
                await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, $"![{result.FileName}]({result.BlobUrl})");

                int start = selection.Start;
                await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, start + 2, start + 2 + result.FileName.Length);
            }
            else
            {
                if (selection.Text.Length > 0)
                {
                    await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, $"![{selection.Text}](https://)");
                }
                else
                {
                    await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, $"![](https://)");
                }

                int start = selection.Start;
                await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, start + 2, start + 2);
            }
            var content = await JS.GetTextAreaValueAsync();
            UpdateContent(content);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message);
        }
    }

    private async Task InsertYouTubeVideo()
    {
        try
        {
            var selection = await _jsModule.InvokeAsync<TextSelection>("getTextAreaSelection", TextAreaRef);
            await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, "[youtube:youtubeID]");

            var content = await JS.GetTextAreaValueAsync();
            UpdateContent(content);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error inserting YouTube template: {ex.Message}");
        }
    }

    private void InsertEmoji()
    {
        try
        {
            _allEmojis = EmojiData.GetAllEmojis();
            _isEmojiPickerVisible = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error inserting emoji: {ex.Message}");
        }
    }

    private async Task OnEmojiSelected(string emoji)
    {
        _isEmojiPickerVisible = false; StateHasChanged();

        if (!string.IsNullOrEmpty(emoji))
        {
            var selection = await _jsModule.InvokeAsync<TextSelection>("getTextAreaSelection", TextAreaRef);
            await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, emoji);

            int newPosition = selection.Start + emoji.Length;
            await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, newPosition, newPosition);

            var content = await JS.GetTextAreaValueAsync();
            UpdateContent(content);
        }
    }
    private async Task InsertGrid()
    {
        var selection = await _jsModule.InvokeAsync<TextSelection>("getTextAreaSelection", TextAreaRef);
        await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, $"{selection.Text}\n| Column 1 | Column 2 | Column 3 |\n| --- | --- | --- |\n| text | text | text |\n");
        int end = selection.End;
        await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, end, end);
        var content = await JS.GetTextAreaValueAsync();
        UpdateContent(content);
    }

    private async Task InsertLine()
    {
        var selection = await _jsModule.InvokeAsync<TextSelection>("getTextAreaSelection", TextAreaRef);
        await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, $"{selection.Text}\n---\n");
        int end = selection.End;
        await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, end, end);
        var content = await JS.GetTextAreaValueAsync();
        UpdateContent(content);
    }

    private async Task UndoAsync()
    {
        string? newContent = Current.Undo(); if (newContent == null) return;

        Content = newContent;
        MarkdownText = MarkdownService.ToHtml(Content);
        await _jsModule.InvokeAsync<string>("setTextAreaValue", TextAreaRef, Content, true);
        StateHasChanged();
    }

    private async Task RedoAsync()
    {
        string? newContent = Current.Redo();
        if (newContent == null) return;

        Content = newContent;
        MarkdownText = MarkdownService.ToHtml(Content);
        await _jsModule.InvokeAsync<string>("setTextAreaValue", TextAreaRef, Content, true);
        StateHasChanged();
    }

    private async Task IncreaseIndent()
    {
        var selection = await _jsModule.InvokeAsync<TextSelection>("getTextAreaSelection", TextAreaRef);

        if (selection.Text.Length > 0)
        {
            // Selection exists: indent all selected lines and maintain selection
            var lines = selection.Text.Split('\n');
            var indentedLines = lines.Select(line => "  " + line);
            var result = string.Join('\n', indentedLines);

            await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, result);

            // Maintain selection but adjust for added indentation
            int additionalChars = lines.Length * 2; // 2 spaces per line
            await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, selection.Start, selection.End + additionalChars);
        }
        else
        {
            // No selection: insert 2 spaces and move cursor
            await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, "  ");
            await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, selection.Start + 2, selection.Start + 2);
        }

        var content = await JS.GetTextAreaValueAsync();
        UpdateContent(content);
    }

    private async Task DecreaseIndent()
    {
        var selection = await _jsModule.InvokeAsync<TextSelection>("getTextAreaSelection", TextAreaRef);

        if (selection.Text.Length > 0)
        {
            // Selection exists: unindent all selected lines and maintain selection
            var lines = selection.Text.Split('\n');
            int totalRemovedChars = 0;
            var unindentedLines = lines.Select(line =>
            {
                if (line.StartsWith("  "))
                {
                    totalRemovedChars += 2;
                    return line.Substring(2);
                }
                else if (line.StartsWith("\t"))
                {
                    totalRemovedChars += 1;
                    return line.Substring(1);
                }
                else if (line.StartsWith(" "))
                {
                    totalRemovedChars += 1;
                    return line.Substring(1);
                }
                return line;
            });
            var result = string.Join('\n', unindentedLines);

            await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, result);
            UpdateContent(result);

            // Maintain selection but adjust for removed indentation
            int newEnd = Math.Max(selection.Start, selection.End - totalRemovedChars);
            await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, selection.Start, newEnd);
        }
        else
        {
            // No selection: remove indentation from current line and keep cursor position
            var content = await JS.GetTextAreaValueAsync();
            var lines = content.Split('\n');
            var caretPos = selection.Start;

            // Find current line
            int currentPos = 0;
            int lineIndex = 0;
            for (int i = 0; i < lines.Length; i++)
            {
                if (currentPos + lines[i].Length >= caretPos)
                {
                    lineIndex = i;
                    break;
                }
                currentPos += lines[i].Length + 1; // +1 for newline
            }

            // Remove indentation from current line
            if (lineIndex < lines.Length)
            {
                var currentLine = lines[lineIndex];
                int removedChars = 0;

                if (currentLine.StartsWith("  "))
                {
                    lines[lineIndex] = currentLine.Substring(2);
                    removedChars = 2;
                }
                else if (currentLine.StartsWith("\t"))
                {
                    lines[lineIndex] = currentLine.Substring(1);
                    removedChars = 1;
                }
                else if (currentLine.StartsWith(" "))
                {
                    lines[lineIndex] = currentLine.Substring(1); removedChars = 1;
                }

                if (removedChars > 0)
                {
                    var newContent = string.Join('\n', lines);
                    await _jsModule.InvokeAsync<string>("setTextAreaValue", TextAreaRef, newContent, false);

                    // Adjust cursor position if it was after the removed indentation
                    int lineStartPos = currentPos - (lineIndex > 0 ? lines[lineIndex].Length + removedChars : lines[lineIndex].Length + removedChars);
                    int cursorPosInLine = caretPos - lineStartPos;
                    int newCursorPos = Math.Max(lineStartPos, caretPos - Math.Min(removedChars, cursorPosInLine));

                    await _jsModule.InvokeVoidAsync("setCaretPosition", TextAreaRef, newCursorPos, newCursorPos);
                    UpdateContent(newContent);
                }
            }
        }
    }

    // Helper methods for toolbar event handling
    private async Task HandleFormatText((string prefix, string suffix) args)
    {
        await FormatText(args.prefix, args.suffix);
    }

    private async Task HandleInsertList(string prefix)
    {
        await InsertList(prefix);
    }

    private async Task HandleSetViewMode(string mode)
    {
        await SetViewMode(mode);
    }

    private void UpdateContent(string content)
    {
        Content = content;
        MarkdownText = MarkdownService.ToHtml(Content);
        Current.Content = Content;
        StateHasChanged();
    }

    private async Task AutoInsertEmoji()
    {
        // Only available in Edit mode, not in Playground/Try mode
        if (IsTry)
        {
            return;
        }
        try
        {
            var selection = await _jsModule.InvokeAsync<TextSelection>("getTextAreaSelection", TextAreaRef);
            if (selection.Start == selection.End) return; // No selection

            var selectedText = selection.Text;
            if (string.IsNullOrWhiteSpace(selectedText)) return;
            // Call server API to get emoji suggestion
            var requestBody = new { Text = selectedText };
            var response = await HttpClient.PostAsJsonAsync("/api/aiemoji/suggest", requestBody); if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SuggestEmojiResponse>();
                var suggestedEmoji = result?.Emoji;

                if (!string.IsNullOrEmpty(suggestedEmoji))
                {
                    // Check if selected text starts with markdown symbols (# or -)
                    var modifiedText = GetEmojiInsertedText(selectedText, suggestedEmoji);
                    await _jsModule.InvokeAsync<bool>("replaceTextAreaSelection", TextAreaRef, modifiedText);
                    var content = await JS.GetTextAreaValueAsync();
                    UpdateContent(content);
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.TooManyRequests)
            {
                // Handle rate limit error with detailed message
                var errorMessage = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", errorMessage);
            }
            else
            {
                // Handle other HTTP errors
                var errorMessage = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"AI Emoji feature is temporarily unavailable: {errorMessage}");
            }
        }
        catch (HttpRequestException httpEx)
        {
            await JS.InvokeVoidAsync("alert", "AI Emoji feature is currently unavailable due to network issues. Please check your connection and try again in a few moments.");
            Console.WriteLine($"Auto emoji HTTP error: {httpEx.Message}");
        }
        catch (TaskCanceledException)
        {
            await JS.InvokeVoidAsync("alert", "AI Emoji request timed out. The service may be busy. Please try again in a few moments.");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "AI Emoji feature encountered an unexpected error. Please try again in a few moments.");
            Console.WriteLine($"Auto emoji error: {ex.Message}");
        }
    }

    private string GetEmojiInsertedText(string selectedText, string emoji)
    {
        // Trim the text to handle leading/trailing whitespace
        var trimmedText = selectedText.TrimStart();

        // Check if the text starts with markdown symbols
        if (IsMarkdownSymbolStart(trimmedText))
        {
            var insertPosition = GetEmojiInsertPosition(trimmedText);
            if (insertPosition > 0)
            {
                // Insert emoji after the symbol and space(s)
                var prefix = trimmedText.Substring(0, insertPosition);
                var suffix = trimmedText.Substring(insertPosition);
                return selectedText.Substring(0, selectedText.Length - trimmedText.Length) +
                       prefix + emoji + " " + suffix;
            }
        }

        // Default behavior: insert emoji at the beginning
        return emoji + " " + selectedText;
    }

    private bool IsMarkdownSymbolStart(string text)
    {
        if (string.IsNullOrEmpty(text)) return false;

        // Check for various markdown patterns
        return text.StartsWith("#") ||           // Heading
               text.StartsWith("-") ||           // Bullet list or checkbox
               text.StartsWith("- [ ]") ||       // Checkbox (unchecked)
               text.StartsWith("- [x]") ||       // Checkbox (checked)
               text.StartsWith("- [X]") ||       // Checkbox (checked, uppercase)
               System.Text.RegularExpressions.Regex.IsMatch(text, @"^\d+\."); // Numbered list
    }

    private int GetEmojiInsertPosition(string text)
    {
        // Handle checkbox patterns first (more specific)
        if (text.StartsWith("- [ ]") || text.StartsWith("- [x]") || text.StartsWith("- [X]"))
        {
            var afterCheckbox = text.StartsWith("- [ ]") ? 5 : 5; // "- [ ]" or "- [x]" length
            // Skip any spaces after the checkbox
            while (afterCheckbox < text.Length && text[afterCheckbox] == ' ')
            {
                afterCheckbox++;
            }
            return afterCheckbox;
        }

        // Handle numbered list (e.g., "1. ", "12. ")
        var numberedListMatch = System.Text.RegularExpressions.Regex.Match(text, @"^(\d+\.\s*)");
        if (numberedListMatch.Success)
        {
            return numberedListMatch.Length;
        }

        // Handle simple bullet list or heading
        if (text.StartsWith("#") || text.StartsWith("-"))
        {
            var symbolIndex = text.StartsWith("#") ? text.IndexOf('#') : text.IndexOf('-');
            if (symbolIndex >= 0)
            {
                var afterSymbol = symbolIndex + 1;
                // Skip any spaces after the symbol
                while (afterSymbol < text.Length && text[afterSymbol] == ' ')
                {
                    afterSymbol++;
                }
                return afterSymbol;
            }
        }

        return 0;
    }

    private void OnFontSettingsChanged((string FontFamily, int FontSize) settings)
    {
        _currentFontFamily = settings.FontFamily;
        _currentFontSize = settings.FontSize;
        StateHasChanged();
    }

    public class SuggestEmojiResponse
    {
        public string Emoji { get; set; } = string.Empty;
    }

    // Data transfer objects for JavaScript interop
    public class TextSelection
    {
        public string Text { get; set; } = "";
        public int Start { get; set; }
        public int End { get; set; }
    }

    public class ImageUploadResult
    {
        public string BlobUrl { get; set; } = string.Empty;
        public string FileName { get; set; } = string.Empty;
    }

    private int GetPlainTextCharacterCount()
    {
        if (string.IsNullOrEmpty(MarkdownText))
            return 0;

        try
        {
            // Remove HTML tags and decode HTML entities to get plain text character count
            var plainText = System.Text.RegularExpressions.Regex.Replace(MarkdownText, "<.*?>", string.Empty);

            // Decode common HTML entities
            plainText = plainText.Replace("&nbsp;", " ")
                                .Replace("&lt;", "<")
                                .Replace("&gt;", ">")
                                .Replace("&amp;", "&")
                                .Replace("&quot;", "\"")
                                .Replace("&#39;", "'");

            // Remove extra whitespaces and normalize line breaks
            plainText = System.Text.RegularExpressions.Regex.Replace(plainText, @"\s+", " ").Trim();

            return plainText.Length;
        }
        catch
        {
            // Fallback to content length if HTML parsing fails
            return Content.Length;
        }
    }

    private int GetMarkdownContentCharacterCount()
    {
        if (string.IsNullOrEmpty(Content))
            return 0;

        try
        {
            var content = Content;

            // Remove various markdown syntax patterns
            // Remove links: [text](url) -> text
            content = System.Text.RegularExpressions.Regex.Replace(content, @"\[([^\]]*)\]\([^\)]*\)", "$1");

            // Remove images: ![alt](url) -> alt
            content = System.Text.RegularExpressions.Regex.Replace(content, @"!\[([^\]]*)\]\([^\)]*\)", "$1");

            // Remove reference-style links: [text][ref] -> text
            content = System.Text.RegularExpressions.Regex.Replace(content, @"\[([^\]]*)\]\[[^\]]*\]", "$1");

            // Remove reference definitions: [ref]: url "title" -> (remove entirely)
            content = System.Text.RegularExpressions.Regex.Replace(content, @"^\s*\[[^\]]+\]:\s*\S+.*$", "", System.Text.RegularExpressions.RegexOptions.Multiline);

            // Remove bold/italic markers: **text** or *text* -> text
            content = System.Text.RegularExpressions.Regex.Replace(content, @"\*{1,2}([^\*]+)\*{1,2}", "$1");
            content = System.Text.RegularExpressions.Regex.Replace(content, @"_{1,2}([^_]+)_{1,2}", "$1");

            // Remove strikethrough: ~~text~~ -> text
            content = System.Text.RegularExpressions.Regex.Replace(content, @"~~([^~]+)~~", "$1");

            // Remove inline code: `code` -> code
            content = System.Text.RegularExpressions.Regex.Replace(content, @"`([^`]+)`", "$1");

            // Remove code blocks (fenced): ```...``` -> (remove entirely)
            content = System.Text.RegularExpressions.Regex.Replace(content, @"```[\s\S]*?```", "", System.Text.RegularExpressions.RegexOptions.Multiline);

            // Remove code blocks (indented): remove 4+ space indented lines
            content = System.Text.RegularExpressions.Regex.Replace(content, @"^[ ]{4,}.*$", "", System.Text.RegularExpressions.RegexOptions.Multiline);

            // Remove headers: # Header -> Header
            content = System.Text.RegularExpressions.Regex.Replace(content, @"^#{1,6}\s*(.*)$", "$1", System.Text.RegularExpressions.RegexOptions.Multiline);

            // Remove horizontal rules: --- or *** -> (remove entirely)
            content = System.Text.RegularExpressions.Regex.Replace(content, @"^[\s]*[-*_]{3,}[\s]*$", "", System.Text.RegularExpressions.RegexOptions.Multiline);

            // Remove list markers: - item or * item or 1. item -> item
            content = System.Text.RegularExpressions.Regex.Replace(content, @"^[\s]*[-*+]\s+(.*)$", "$1", System.Text.RegularExpressions.RegexOptions.Multiline);
            content = System.Text.RegularExpressions.Regex.Replace(content, @"^[\s]*\d+\.\s+(.*)$", "$1", System.Text.RegularExpressions.RegexOptions.Multiline);

            // Remove blockquote markers: > text -> text
            content = System.Text.RegularExpressions.Regex.Replace(content, @"^[\s]*>\s*(.*)$", "$1", System.Text.RegularExpressions.RegexOptions.Multiline);

            // Remove table syntax: | col1 | col2 | -> col1 col2
            content = System.Text.RegularExpressions.Regex.Replace(content, @"\|", " ");
            content = System.Text.RegularExpressions.Regex.Replace(content, @"^[\s]*[-:|\s]+[\s]*$", "", System.Text.RegularExpressions.RegexOptions.Multiline);

            // Remove YouTube video syntax: [youtube:ID] -> (remove entirely)
            content = System.Text.RegularExpressions.Regex.Replace(content, @"\[youtube:[^\]]+\]", "");

            // Remove checkbox markers: - [ ] task or - [x] task -> task
            content = System.Text.RegularExpressions.Regex.Replace(content, @"^[\s]*-\s*\[[x\s]\]\s*(.*)$", "$1", System.Text.RegularExpressions.RegexOptions.Multiline);

            // Clean up extra whitespace and empty lines
            content = System.Text.RegularExpressions.Regex.Replace(content, @"\n\s*\n", "\n");
            content = System.Text.RegularExpressions.Regex.Replace(content, @"[ \t]+", " ");
            content = content.Trim();

            return content.Length;
        }
        catch
        {
            // Fallback to original content length if parsing fails
            return Content.Length;
        }
    }
}
