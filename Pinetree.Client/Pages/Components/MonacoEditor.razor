@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div id="@EditorId" class="no-resize" style="width: 100%; height: 100%; border: 1px solid #ccc;"></div>

@code {
    [Parameter] public string EditorId { get; set; } = "monaco-editor-container";
    [Parameter] public string Value { get; set; } = "";
    [Parameter] public EventCallback<string> OnChange { get; set; }

    private string Language { get; set; } = "markdown";
    private string Theme { get; set; } = "vs";
    private DotNetObjectReference<MonacoEditor>? objRef;
    private bool isInitialized = false;
    private IJSObjectReference? module;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await InitializeEditorAsync();
        }
        else if (!isInitialized && !string.IsNullOrEmpty(Value))
        {
            await JSRuntime.InvokeVoidAsync("monacoInterop.setValue", EditorId, Value);
        }
    }

    private async Task InitializeEditorAsync()
    {
        await JSRuntime.InvokeVoidAsync("monacoInterop.initialize",
            EditorId,
            Language,
            Theme,
            Value,
            objRef);

        isInitialized = true;
    }

    [JSInvokable]
    public async Task OnContentChanged(string newContent)
    {
        Value = newContent;
        await OnChange.InvokeAsync(newContent);
    }

    public async ValueTask DisposeAsync()
    {
        if (objRef != null)
        {
            await JSRuntime.InvokeVoidAsync("monacoInterop.dispose", EditorId);
            objRef.Dispose();
        }
    }

    // public async Task SetValueAsync(string value)
    // {
    //     Value = value;
    //     if (isInitialized)
    //     {
    //         await JSRuntime.InvokeVoidAsync("monacoInterop.setValue", EditorId, value);
    //     }
    // }

    public async Task FocusAsync()
    {
        if (isInitialized)
        {
            await JSRuntime.InvokeVoidAsync("monacoInterop.focus", EditorId);
        }
    }
}
