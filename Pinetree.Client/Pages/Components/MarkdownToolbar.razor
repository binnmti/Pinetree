@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using Pinetree.Client
@using Pinetree.Client.Pages
@using Pinetree.Client.Pages.Components

<div class="toolbar bg-light border-bottom d-flex align-items-center p-1">
    <div class="btn-toolbar" role="toolbar" aria-label="Markdown editing toolbar">        <div class="btn-group me-2" role="group" aria-label="Special actions">
            <button type="button" class="btn btn-sm btn-outline-success" title="Move selected text to child file" @onclick="() => OnExtractToChildFile.InvokeAsync()">
                <i class="bi bi-file-earmark-arrow-down"></i> Extract to Child
            </button>
        </div>
        <div class="btn-group me-2" role="group" aria-label="Undo/Redo">
            <button type="button" class="btn btn-sm btn-outline-dark" title="Undo (Ctrl+Z)" @onclick="() => OnUndo.InvokeAsync()" disabled="@(!CanUndo)">
                <i class="bi bi-arrow-counterclockwise"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" title="Redo (Ctrl+Y)" @onclick="() => OnRedo.InvokeAsync()" disabled="@(!CanRedo)">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div><div class="btn-group me-2" role="group" aria-label="Text formatting">
            <button type="button" class="btn btn-sm btn-outline-dark" title="Bold" @onclick='() => OnFormatText.InvokeAsync(("**", "**"))'>
                <i class="bi bi-type-bold"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" title="Italic" @onclick='() => OnFormatText.InvokeAsync(("*", "*"))'>
                <i class="bi bi-type-italic"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" title="Strikethrough" @onclick='() => OnFormatText.InvokeAsync(("~~", "~~"))'>
                <i class="bi bi-type-strikethrough"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" title="Heading" @onclick='() => OnInsertList.InvokeAsync("# ")'>
                <i class="bi bi-type-h1"></i>
            </button>
        </div>
        <div class="btn-group me-2" role="group" aria-label="List formatting">
            <button type="button" class="btn btn-sm btn-outline-dark" title="Bullet List" @onclick='() => OnInsertList.InvokeAsync("- ")'>
                <i class="bi bi-list-ul"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" title="Numbered List" @onclick='() => OnInsertList.InvokeAsync("1. ")'>
                <i class="bi bi-list-ol"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" title="Check List" @onclick='() => OnInsertList.InvokeAsync("- [ ] ")'>
                <i class="bi bi-check-square"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" title="Insert Code Block" @onclick='() => OnFormatText.InvokeAsync(("```\n", "\n```"))'>
                <i class="bi bi-code-slash"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" title="Quotation" @onclick='() => OnInsertList.InvokeAsync("> ")'>
                <i class="bi bi-quote"></i>
            </button>
        </div>        <div class="btn-group me-2" role="group" aria-label="Indentation">
            <button type="button" class="btn btn-sm btn-outline-dark" title="Decrease Indent" @onclick="() => OnDecreaseIndent.InvokeAsync()">
                <i class="bi bi-text-indent-right"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" title="Increase Indent" @onclick="() => OnIncreaseIndent.InvokeAsync()">
                <i class="bi bi-text-indent-left"></i>
            </button>
        </div>
        <div class="btn-group me-2" role="group" aria-label="Insert elements">
            <button type="button" class="btn btn-sm btn-outline-dark" title="Insert Link" @onclick='() => OnInsertLink.InvokeAsync()'>
                <i class="bi bi-link-45deg"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" title="Insert Image" @onclick="() => OnInsertImage.InvokeAsync()">
                <i class="bi bi-image"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" title="Insert Grid" @onclick="() => OnInsertGrid.InvokeAsync()">
                <i class="bi bi-grid-3x2"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" title="Insert Line" @onclick="() => OnInsertLine.InvokeAsync()">
                <i class="bi bi-dash"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-success" title="Insert Emoji" @onclick="() => OnInsertEmoji.InvokeAsync()">
                <i class="bi bi-emoji-smile"></i> Emoji
            </button>
            @if (!IsTry)
            {
                <button type="button" class="btn btn-sm btn-outline-primary" title="Auto Insert Emoji (AI)" @onclick="() => OnAutoInsertEmoji.InvokeAsync()">
                    <i class="bi bi-robot"></i> AI Emoji
                </button>
                <i class="bi bi-question-circle ms-1 p-1 text-body" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" data-bs-custom-class="custom-tooltip"
                   title="<strong>AI Emoji Feature</strong><br>Select text and click the AI Emoji button to automatically suggest the most suitable emoji for your content.<br><br>Rate limits apply to prevent abuse. Please wait a moment if you reach the limit."></i>
            }
        </div>
        <div class="btn-group me-2" role="group" aria-label="Font">
            <FontSettings OnFontSettingsChanged="(settings) => OnFontSettingsChanged.InvokeAsync(settings)" />
        </div>
        <div class="btn-group ms-2" role="group" aria-label="View mode">
            <button type="button" class="btn btn-sm @(ViewMode == "split" ? "btn-primary" : "btn-outline-secondary")"
                    @onclick='() => OnSetViewMode.InvokeAsync("split")' title="Split view">
                <i class="bi bi-layout-split"></i>
            </button>
            <button type="button" class="btn btn-sm @(ViewMode == "edit" ? "btn-primary" : "btn-outline-secondary")"
                    @onclick='() => OnSetViewMode.InvokeAsync("edit")' title="Edit only">
                <i class="bi bi-pencil-square"></i>
            </button>
            <button type="button" class="btn btn-sm @(ViewMode == "preview" ? "btn-primary" : "btn-outline-secondary")"
                    @onclick='() => OnSetViewMode.InvokeAsync("preview")' title="Preview only">
                <i class="bi bi-eye"></i>
            </button>
        </div>
    </div>    <div class="btn-group ms-auto" role="group" aria-label="Id actions">
        <button @onclick="() => OnCopyDocumentId.InvokeAsync()" class="btn btn-sm btn-outline-secondary" title="@(CopyIconState ? "Copied!" : $"Click to copy {CurrentGuid}")">
            <span class="d-flex align-items-center">
                <i class="@(CopyIconState ? "bi bi-check-lg" : "bi bi-clipboard")" style="transition: all 0.3s"></i>
                <small class="ms-1">ID: @($"{CurrentGuid.ToString()[..8]}...")</small>
            </span>
        </button>
    </div>
    <i class="bi bi-question-circle ms-1 p-1 text-body" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" data-bs-custom-class="custom-tooltip"
       title="<strong>Document ID</strong><br>This unique identifier can be used to reference this document in markdown links.<br>Format: [link text](//ID)"></i>
</div>

@code {
    [Parameter] public bool CanUndo { get; set; }
    [Parameter] public bool CanRedo { get; set; }
    [Parameter] public bool IsTry { get; set; }
    [Parameter] public string ViewMode { get; set; } = "split";
    [Parameter] public bool CopyIconState { get; set; }
    [Parameter] public Guid CurrentGuid { get; set; }

    // Event callbacks for parent component
    [Parameter] public EventCallback OnExtractToChildFile { get; set; }
    [Parameter] public EventCallback OnUndo { get; set; }
    [Parameter] public EventCallback OnRedo { get; set; }
    [Parameter] public EventCallback<(string prefix, string suffix)> OnFormatText { get; set; }
    [Parameter] public EventCallback<string> OnInsertList { get; set; }
    [Parameter] public EventCallback OnDecreaseIndent { get; set; }
    [Parameter] public EventCallback OnIncreaseIndent { get; set; }
    [Parameter] public EventCallback OnInsertLink { get; set; }
    [Parameter] public EventCallback OnInsertImage { get; set; }
    [Parameter] public EventCallback OnInsertGrid { get; set; }
    [Parameter] public EventCallback OnInsertLine { get; set; }
    [Parameter] public EventCallback OnInsertEmoji { get; set; }
    [Parameter] public EventCallback OnAutoInsertEmoji { get; set; }
    [Parameter] public EventCallback<string> OnSetViewMode { get; set; }
    [Parameter] public EventCallback OnCopyDocumentId { get; set; }
    [Parameter] public EventCallback<(string FontFamily, int FontSize)> OnFontSettingsChanged { get; set; }
}
