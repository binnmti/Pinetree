@using Pinetree.Client.VModel
@using Pinetree.Client.Services
@using Pinetree.Shared.Model

@if (Pinetree != null)
{
    <ul class="list-unstyled" style="padding-left: 0.75rem;">
        <li style="">
            <div class="d-flex justify-content-between list-group-item-action">
                @if (Pinetree.Children.Count != 0)
                {
                    if (Pinetree.IsExpanded)
                    {
                        <i class="bi bi-caret-down" @onclick="OnClickExpanded"></i>
                    }
                    else
                    {
                        <i class="bi bi-caret-right" @onclick="OnClickExpanded"></i>
                    }
                }
                else
                {
                    <span style="display:inline-block; width:1em;"></span>
                }
                <i class="bi bi-file-earmark-text"></i>
                @if (Pinetree.IsCurrent)
                {
                    <div class="title px-1 flex-grow-1 border" @onclick="ActivePinetree" style="font-weight: bold; background-color:aliceblue">@Pinetree.Title</div>
                }
                else
                {
                    <div class="title px-1 flex-grow-1" @onclick="ActivePinetree">@Pinetree.Title</div>
                }
                <i @onclick="AddChild" class="bi bi-file-earmark-plus border px-1" style="cursor:pointer"></i>
                <i @onclick="ConfirmDelete" class="bi bi-trash2 border px-1" style="cursor:pointer"></i>
            </div>
            @if (Pinetree.IsExpanded)
            {
                @foreach (var tree in Pinetree.Children)
                {
                    <TreeView Pinetree="@(tree)" id="@(Id)" IsTry=@IsTry IsProfessional=@IsProfessional OnChildEvent ="OnChildEvent" />
                }
            }
        </li>
    </ul>
}

@code {
    [Parameter]
    public long Id { get; set; }

    [Parameter]
    public required Pinetree Pinetree { get; set; }

    [Parameter]
    public bool IsTry { get; set; }

    [Parameter]
    public EventCallback<long> OnChildEvent { get; set; }

    [Parameter]
    public bool IsProfessional { get; set; }

    [Inject]
    public required NavigationManager NavigationManager { get; set; }
    [Inject]
    public required HttpClient HttpClient { get; set; }
    [Inject]
    public required IJSRuntime JS { get; set; }

    private void OnClickExpanded()
    {
        Pinetree.IsExpanded = !Pinetree.IsExpanded;
        StateHasChanged();
    }

    private async Task ActivePinetree()
    {
        await OnChildEvent.InvokeAsync(Pinetree.Id);

        StateHasChanged();
    }

    private async Task AddChild()
    {
        var newChildId = await MarkdownUtil.AddChildAsync(Pinetree, "Untitled", "", JS, HttpClient, IsTry, IsProfessional);


        await OnChildEvent.InvokeAsync(newChildId);
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        if (Pinetree.Parent == null)
        {
            await JS.InvokeVoidAsync("alert", "You can't delete the first");
        }
        else
        {
            var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
            if (confirmed)
            {
                if (!IsTry)
                {
                    await HttpClient.DeleteAsync($"/api/Pinecones/delete-include-child/{Pinetree.Id}");
                }
                var id = Pinetree.DeleteIncludeChild();
                await OnChildEvent.InvokeAsync(id);
                StateHasChanged();
            }
        }
    }
}
