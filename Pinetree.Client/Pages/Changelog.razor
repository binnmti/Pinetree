@page "/changelog"
@rendermode InteractiveAuto
@inject HttpClient HttpClient
@using System.Text.RegularExpressions

<PageTitle>Changelog - Pinetree</PageTitle>

<div class="container mt-4 mb-5">
    <h1 class="mb-3">Changelog</h1>

    @if (isLoading)
    {
        <LoadingSpinner Message="Loading changelog..." />
    }
    else if (changelogEntries.Any())
    {
        @foreach (var entry in changelogEntries)
        {
            <div class="card mb-4">
                <div class="card-header bg-secondary text-white">
                    <h2 class="mb-0">Version @entry.Version</h2>
                    <small>@entry.FormattedDate</small>
                </div>
                <div class="card-body">
                    @((MarkupString)ConvertMarkdownToHtml(entry.Content))
                </div>
            </div>
        }
    }
    else
    {
        <div class="alert alert-warning">
            <h4>No changelog entries found</h4>
            <p>Unable to load changelog content. Please try refreshing the page.</p>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private List<ChangelogEntry> changelogEntries = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var content = await HttpClient.GetStringAsync("/Changelog.md");
                changelogEntries = ParseChangelogContent(content);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading changelog: {ex.Message}");
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private List<ChangelogEntry> ParseChangelogContent(string content)
    {
        var entries = new List<ChangelogEntry>();
        var lines = content.Split('\n', StringSplitOptions.RemoveEmptyEntries);

        ChangelogEntry? currentEntry = null;
        var contentBuilder = new System.Text.StringBuilder();

        foreach (var line in lines)
        {
            var trimmedLine = line.Trim();

            // Skip empty lines and the main title
            if (string.IsNullOrWhiteSpace(trimmedLine) || trimmedLine == "# Changelog")
                continue;

            // Match version headers like "## [0.9.2] - 2025-06-12"
            var versionMatch = Regex.Match(trimmedLine, @"^## \[(.+?)\] - (.+)$");
            if (versionMatch.Success)
            {
                // Save previous entry
                if (currentEntry != null)
                {
                    currentEntry.Content = contentBuilder.ToString().Trim();
                    entries.Add(currentEntry);
                }

                // Start new entry
                currentEntry = new ChangelogEntry
                {
                    Version = versionMatch.Groups[1].Value,
                    Date = ParseDate(versionMatch.Groups[2].Value),
                    Content = string.Empty
                };
                contentBuilder.Clear();
            }
            else if (currentEntry != null && !trimmedLine.StartsWith("---"))
            {
                // Add content lines (skip separators)
                contentBuilder.AppendLine(trimmedLine);
            }
        }

        // Add the last entry
        if (currentEntry != null)
        {
            currentEntry.Content = contentBuilder.ToString().Trim();
            entries.Add(currentEntry);
        }

        return entries;
    }

    private DateTime ParseDate(string dateString)
    {
        // Try to parse ISO 8601 format (YYYY-MM-DD)
        if (DateTime.TryParseExact(dateString, "yyyy-MM-dd", null, System.Globalization.DateTimeStyles.None, out var date))
        {
            return date;
        }

        // Fallback to general parsing
        if (DateTime.TryParse(dateString, out var fallbackDate))
        {
            return fallbackDate;
        }

        return DateTime.Now;
    }

    private string ConvertMarkdownToHtml(string markdown)
    {
        if (string.IsNullOrWhiteSpace(markdown))
            return string.Empty;

        var lines = markdown.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        var html = new System.Text.StringBuilder();
        var inList = false;

        foreach (var line in lines)
        {
            var trimmedLine = line.Trim();

            if (trimmedLine.StartsWith("### "))
            {
                if (inList)
                {
                    html.AppendLine("</ul>");
                    inList = false;
                }
                html.AppendLine($"<h3>{trimmedLine.Substring(4)}</h3>");
            }
            else if (trimmedLine.StartsWith("- "))
            {
                if (!inList)
                {
                    html.AppendLine("<ul>");
                    inList = true;
                }
                html.AppendLine($"<li>{trimmedLine.Substring(2)}</li>");
            }
            else if (!string.IsNullOrWhiteSpace(trimmedLine) && !trimmedLine.StartsWith("PR: #"))
            {
                if (inList)
                {
                    html.AppendLine("</ul>");
                    inList = false;
                }
                html.AppendLine($"<p>{trimmedLine}</p>");
            }
        }

        if (inList)
        {
            html.AppendLine("</ul>");
        }

        return html.ToString();
    }

    public class ChangelogEntry
    {
        public string Version { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public string Content { get; set; } = string.Empty;

        public string FormattedDate => Date.ToString("MM/dd/yyyy");
    }
}