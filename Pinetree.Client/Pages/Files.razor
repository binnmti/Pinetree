@page "/Files"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Pinetree.Client.ViewModels
@using Pinetree.Client.Services
@using Pinetree.Shared.ViewModels
@using System.Net.Http

@rendermode InteractiveWebAssembly

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (isLoading)
{
    <LoadingSpinner Message="Loading user dashboard..." />
}
else
{
    <h1>User Dashboard</h1>

    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-md-2">
                <!-- Tab navigation -->
                <div class="list-group">
                    <button @onclick="() => SetActiveTab(0)" class="list-group-item list-group-item-action @(activeTab == 0 ? "active" : "")">
                        <i class="bi bi-file-earmark-text"></i> Active Files
                    </button>
                    <button @onclick="() => SetActiveTab(1)" class="list-group-item list-group-item-action @(activeTab == 1 ? "active" : "")">
                        <i class="bi bi-trash"></i> Trash
                    </button>
                    <button @onclick="() => SetActiveTab(2)" class="list-group-item list-group-item-action @(activeTab == 2 ? "active" : "")">
                        <i class="bi bi-images"></i> My Image
                    </button>
                </div>
            </div>
            <div class="col-md-10">
                <!-- Tab content -->
                @if (activeTab == 0)
                {
                    <!-- Documents Tab -->
                    <div class="editor-container">
                        <!-- Search and Filter Controls -->
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                                    <input type="text" class="form-control" placeholder="Search documents..."
                                           @bind="searchQuery" @bind:event="oninput" @onkeyup="@(async (e) => { if (searchDebounceTimer != null) searchDebounceTimer.Dispose(); searchDebounceTimer = new Timer(async _ => await SearchDocuments(), null, 500, Timeout.Infinite); })" />
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="publicOnlyCheck" @bind="showPublicOnly" @bind:after="OnFilterChanged">
                                    <label class="form-check-label" for="publicOnlyCheck">
                                        Public only
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="input-group">
                                    <label class="input-group-text">Sort by:</label>
                                    <select class="form-select" @bind="sortBy" @bind:after="OnSortChanged">
                                        <option value="updatedat">Updated Date</option>
                                        <option value="createdat">Created Date</option>
                                        <option value="title">Title</option>
                                    </select>
                                    <button class="btn btn-outline-secondary" type="button" @onclick="ToggleSortDirection">
                                        <i class="bi @(sortDescending ? "bi-sort-down" : "bi-sort-up")"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="input-group">
                                    <label class="input-group-text">Show:</label>
                                    <select class="form-select" @bind="PageSize" @bind:after="OnPageSizeChanged">
                                        <option value="10">10</option>
                                        <option value="20">20</option>
                                        <option value="30">30</option>
                                    </select>
                                    <span class="input-group-text">items</span>
                                </div>
                            </div>
                        </div>
                        @if (isLoading)
                        {
                            <LoadingSpinner Message="Loading documents..." />
                        }
                        else
                        {
                            <div class="row">
                                <div class="col">
                                    <div class="d-flex flex-wrap">
                                        <!-- Add new file card at the beginning -->
                                        <div class="card m-2" style="width:14rem; height: 16rem">
                                            <div class="card-body d-flex flex-column justify-content-center align-items-center"
                                                 @onclick="() => CreateFile()" style="cursor:pointer">
                                                <i class="bi bi-file-earmark-plus" style="font-size: 2rem;"></i>
                                                <p class="mt-2">Create New File</p>
                                            </div>
                                        </div>                                        @foreach (var pinecone in PinetreeViews)
                                        {
                                            <div class="card m-2" style="width:14rem; height: 16rem; display: flex; flex-direction: column;">
                                                <div class="card-body" style="padding: 0.75rem; flex: 1; display: flex; flex-direction: column; min-height: 0;">
                                                    <div class="d-flex align-items-center text-truncate mb-2" style="flex-shrink: 0;">
                                                        <i class="bi @(pinecone.IsPublic ? "bi-globe" : "bi-file-earmark-lock") border px-1 me-1"
                                                           @onclick="() => ToggleVisibility(pinecone.Guid, !pinecone.IsPublic)"
                                                           title="@(pinecone.IsPublic ? "Public" : "Private")"
                                                           style="cursor:pointer"></i>
                                                        @if (pinecone.IsPublic)
                                                        {
                                                            <a href="@($"/View/{Username}/{pinecone.Guid}")" target="_blank" class="text-muted small text-truncate">@NavigationManager.ToAbsoluteUri($"/View/{Username}/{pinecone.Guid}")</a>
                                                        }
                                                        else
                                                        {
                                                            <small class="text-muted">Only me</small>
                                                        }
                                                    </div>
                                                    <div class="d-flex justify-content-between mb-2" style="flex-shrink: 0;">
                                                        <strong class="card-title text-truncate" @onclick="() => OpenFile(pinecone.Guid)" style="cursor:pointer">
                                                            <i class="bi bi-file-earmark-text"></i>
                                                            @pinecone.Title
                                                        </strong>
                                                        <div>
                                                            <i @onclick="() => ConfirmDelete(pinecone.Guid)" class="bi bi-trash2 border px-1" style="cursor:pointer"></i>
                                                        </div>
                                                    </div>
                                                    <div class="card-text" @onclick="() => OpenFile(pinecone.Guid)" style="cursor:pointer; flex: 1; overflow: hidden; margin-bottom: 0.5rem;">@((MarkupString)GetContent(pinecone.Content))</div>
                                                    @{
                                                        string dateText = sortBy switch
                                                        {
                                                            "updatedat" => pinecone.Update.ToString("MMM dd, yyyy"),
                                                            "createdat" => pinecone.Create.ToString("MMM dd, yyyy"),
                                                            _ => ""
                                                        };
                                                    }
                                                    @if (!string.IsNullOrEmpty(dateText))
                                                    {
                                                        <div class="text-muted small" style="flex-shrink: 0; margin-top: auto;">
                                                            @dateText
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Pagination -->
                            @if (TotalPages > 1)
                            {
                                <nav aria-label="Page navigation" class="mt-4">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <small class="text-muted">
                                                Showing @(((CurrentPage - 1) * PageSize) + 1) to @(Math.Min(CurrentPage * PageSize, TotalRecords)) of @TotalRecords entries
                                            </small>
                                        </div>
                                        <ul class="pagination mb-0">
                                            <!-- First Page -->
                                            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                                                <button class="page-link" @onclick="() => LoadPage(1)" disabled="@(CurrentPage == 1)">
                                                    <i class="bi bi-chevron-double-left"></i>
                                                </button>
                                            </li>
                                            <!-- Previous Page -->
                                            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                                                <button class="page-link" @onclick="() => LoadPage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">
                                                    <i class="bi bi-chevron-left"></i>
                                                </button>
                                            </li>

                                            <!-- Page Numbers -->
                                            @{
                                                int startPage = Math.Max(1, CurrentPage - 2);
                                                int endPage = Math.Min(TotalPages, startPage + 4);
                                                if (endPage - startPage < 4)
                                                {
                                                    startPage = Math.Max(1, endPage - 4);
                                                }
                                            }

                                            @if (startPage > 1)
                                            {
                                                <li class="page-item">
                                                    <button class="page-link" @onclick="() => LoadPage(1)">1</button>
                                                </li>
                                                @if (startPage > 2)
                                                {
                                                    <li class="page-item disabled">
                                                        <span class="page-link">...</span>
                                                    </li>
                                                }
                                            }

                                            @for (int i = startPage; i <= endPage; i++)
                                            {
                                                int pageNum = i;
                                                <li class="page-item @(i == CurrentPage ? "active" : "")">
                                                    <button class="page-link" @onclick="() => LoadPage(pageNum)">@i</button>
                                                </li>
                                            }

                                            @if (endPage < TotalPages)
                                            {
                                                @if (endPage < TotalPages - 1)
                                                {
                                                    <li class="page-item disabled">
                                                        <span class="page-link">...</span>
                                                    </li>
                                                }
                                                <li class="page-item">
                                                    <button class="page-link" @onclick="() => LoadPage(TotalPages)">@TotalPages</button>
                                                </li>
                                            }

                                            <!-- Next Page -->
                                            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                                                <button class="page-link" @onclick="() => LoadPage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">
                                                    <i class="bi bi-chevron-right"></i>
                                                </button>
                                            </li>
                                            <!-- Last Page -->
                                            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                                                <button class="page-link" @onclick="() => LoadPage(TotalPages)" disabled="@(CurrentPage == TotalPages)">
                                                    <i class="bi bi-chevron-double-right"></i>
                                                </button>
                                            </li>
                                        </ul>
                                    </div>
                                </nav>
                            }
                        }
                    </div>
                }
                else if (activeTab == 1)
                {
                    <!-- Trash Tab -->
                    <div class="editor-container">
                        <h3><i class="bi bi-trash"></i> Trash</h3>
                        <p class="text-muted">Files deleted within the last 30 days. After 30 days, files are permanently deleted.</p>

                        @if (isLoadingTrash)
                        {
                            <LoadingSpinner Message="Loading deleted files..." />
                        }
                        else if (deletedFiles == null || !deletedFiles.Any())
                        {
                            <div class="text-center py-5">
                                <i class="bi bi-trash" style="font-size: 3rem; color: #6c757d;"></i>
                                <p class="mt-3 text-muted">Trash is empty</p>
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Title</th>
                                            <th>Deleted</th>
                                            <th>Type</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var file in deletedFiles)
                                        {
                                            <tr>
                                                <td>
                                                    <a href="/view/@file.Guid" class="text-decoration-none">
                                                        <i class="bi bi-file-earmark-text me-2"></i>
                                                        @file.Title
                                                    </a>
                                                </td>
                                                <td>
                                                    <small class="text-muted">
                                                        @if (file.DeletedAt.HasValue)
                                                        {
                                                            @file.DeletedAt.Value.ToString("yyyy/MM/dd HH:mm")
                                                        }
                                                    </small>
                                                </td>
                                                <td>
                                                    <span class="badge @(file.DeleteType == "bulk" ? "bg-info" : "bg-secondary")">
                                                        @file.DeleteType
                                                    </span>
                                                </td>
                                                <td>
                                                    <div class="btn-group btn-group-sm" role="group">
                                                        <button type="button" class="btn btn-outline-success"
                                                                @onclick="() => RestoreFile(file.Guid)"
                                                                disabled="@isRestoringFile">
                                                            <i class="bi bi-arrow-counterclockwise"></i> Restore
                                                        </button>
                                                        <button type="button" class="btn btn-outline-danger"
                                                                @onclick="() => PermanentlyDeleteFile(file.Guid)"
                                                                disabled="@isDeletingFile">
                                                            <i class="bi bi-trash"></i> Delete Forever
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                }
                else if (activeTab == 2)
                {
                    <!-- Files Tab (former UserImageFiles.razor content) -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">Storage Usage</div>
                                <div class="card-body">
                                    @if (storageUsage != null)
                                    {
                                        <div class="progress">
                                            <div class="progress-bar" role="progressbar"
                                                 style="width: @storageUsage.percentage%;"
                                                 aria-valuenow="@storageUsage.percentage"
                                                 aria-valuemin="0"
                                                 aria-valuemax="100">
                                                @storageUsage.percentage.ToString("0.0")%
                                            </div>
                                        </div>
                                        <div class="mt-2">
                                            Used: @FormatBytes(storageUsage.used) / @FormatBytes(storageUsage.quota)
                                        </div>
                                    }
                                    else
                                    {
                                        <div>Loading...</div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Preview</th>
                                    <th>Filename</th>
                                    <th>Size</th>
                                    <th>Upload Date</th>
                                    <th>Document</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (files == null)
                                {
                                    <tr>
                                        <td colspan="6" class="text-center">Loading...</td>
                                    </tr>
                                }
                                else if (!files.Any())
                                {
                                    <tr>
                                        <td colspan="6" class="text-center">No files found</td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var file in files)
                                    {
                                        <tr>
                                            <td>
                                                @if (IsImageFile(file.ContentType))
                                                {
                                                    <a href="@file.BlobUrl" target="_blank">
                                                        <img src="@file.BlobUrl" style="max-height: 50px; max-width: 50px;" />
                                                    </a>
                                                }
                                                else
                                                {
                                                    <a href="@file.BlobUrl" target="_blank">
                                                        <i class="bi bi-file-earmark"></i>
                                                    </a>
                                                }
                                            </td>
                                            <td>@file.FileName</td>
                                            <td>@FormatBytes(file.SizeInBytes)</td>
                                            <td>@file.UploadedAt.ToLocalTime().ToString("yyyy/MM/dd HH:mm")</td>
                                            <td>
                                                @if (IsProfileIcon(file))
                                                {
                                                    <span class="text-info"><i class="bi bi-person-circle"></i> Profile Icon</span>
                                                }
                                                else if (string.IsNullOrEmpty(file.PineconeTitle))
                                                {
                                                    <span class="text-muted"><i class="bi bi-exclamation-circle"></i> Deleted Documents</span>
                                                }
                                                else
                                                {
                                                    <a href="/Edit/@file.PineconeGuid">/@file.PineconeTitle</a>
                                                }
                                            </td>
                                            <td>
                                                @if (IsProfileIcon(file))
                                                {
                                                    <button class="btn btn-sm btn-warning" @onclick="() => DeleteFile(file.Id)" title="Remove from profile and delete file">
                                                        <i class="bi bi-exclamation-triangle"></i> Remove Profile Icon
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteFile(file.Id)">
                                                        <i class="bi bi-trash"></i> Delete
                                                    </button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    // Profile icon uses a special GUID for identification
    private static readonly Guid ProfileIconGuid = Guid.Parse("00000000-0000-0000-0000-000000000001");

    // Tab and UI state
    private int activeTab = 0;
    private bool isLoading = true;
    // Data properties
    private List<PinetreeView> PinetreeViews { get; set; } = new List<PinetreeView>();
    private List<UserBlobViewModel>? files;
    private UserFiles? storageUsage;
    private string Username { get; set; } = "";
    private string? ProfileIconUrl { get; set; }

    // Trash-related properties
    private List<PineconeViewModel>? deletedFiles;
    private bool isLoadingTrash = false;
    private bool isRestoringFile = false;
    private bool isDeletingFile = false;

    // Pagination properties
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages { get; set; }
    private int TotalRecords { get; set; }

    // Search and filter properties
    private string searchQuery = "";
    private bool showPublicOnly = false;
    private string sortBy = "updatedat";
    private bool sortDescending = true;
    private Timer? searchDebounceTimer;
    
    private async Task SetActiveTab(int tabIndex)
    {
        activeTab = tabIndex;
        if (activeTab == 0)
        {
            await LoadDocuments();
        }
        else if (activeTab == 1)
        {
            await LoadDeletedFiles();
        }
        else if (activeTab == 2)
        {
            _ = LoadFilesAsync();
            _ = LoadStorageUsageAsync();
        }
    }

    private string GetContent(string content)
    {
        var c = (content.Length < 100) ? content : content[..100];
        return MarkdownService.ToHtml(c);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var identity = await AuthenticationStateProvider.GetIdentityAsync();
            if (identity == null || !identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/");
                return;
            }
            Username = identity.Name ?? "";
            await LoadDocuments();
        }
    }

    private bool IsProfileIcon(UserBlobViewModel file)
    {
        // Profile icons use a special GUID for identification
        return file.PineconeGuid == ProfileIconGuid;
    }

    private async Task LoadPage(int pageNumber)
    {
        CurrentPage = pageNumber;
        await LoadDocuments();
    }
    private async Task LoadDocuments()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Build query parameters for API call
            var queryParams = new List<string>
            {
                $"pageNumber={CurrentPage}",
                $"pageSize={PageSize}",
                $"sortBy={sortBy}",
                $"sortDescending={sortDescending.ToString().ToLower()}",
                $"searchQuery={Uri.EscapeDataString(searchQuery ?? "")}",
                $"publicOnly={showPublicOnly.ToString().ToLower()}"
            };
            var queryString = string.Join("&", queryParams);

            // Get count with same filters
            var countParams = new List<string>
            {
                $"searchQuery={Uri.EscapeDataString(searchQuery ?? "")}",
                $"publicOnly={showPublicOnly.ToString().ToLower()}"
            };
            var countQueryString = string.Join("&", countParams);

            var topCount = await Http.GetFromJsonAsync<int>($"/api/Pinecones/get-user-top-count?{countQueryString}");
            TotalRecords = topCount;
            TotalPages = (int)Math.Ceiling(TotalRecords / (double)PageSize);

            var list = await Http.GetFromJsonAsync<List<PineconeViewModel>>($"/api/Pinecones/get-user-top-list?{queryString}");
            if (list != null)
            {
                // No client-side filtering needed as API handles everything
                PinetreeViews = list.Select(x => x.ToPinetree(PinetreeView.Nothing)).ToList();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to load documents: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchDocuments()
    {
        CurrentPage = 1; // Reset to first page when searching
        await LoadDocuments();
    }

    private async Task OnFilterChanged()
    {
        CurrentPage = 1; // Reset to first page when filtering
        await LoadDocuments();
    }

    private async Task OnSortChanged()
    {
        CurrentPage = 1; // Reset to first page when sorting
        await LoadDocuments();
    }

    private async Task OnPageSizeChanged()
    {
        CurrentPage = 1; // Reset to first page when changing page size
        await LoadDocuments();
    }

    private async Task ToggleSortDirection()
    {
        sortDescending = !sortDescending;
        CurrentPage = 1; // Reset to first page when changing sort direction
        await LoadDocuments();
    }

    private async Task CreateFile()
    {
        var response = await Http.PostAsJsonAsync("/api/Pinecones/add-top", new { });
        if (response.IsSuccessStatusCode)
        {
            var pinecone = await response.Content.ReadFromJsonAsync<PineconeViewModel>();
            if (pinecone != null)
            {
                var url = $"/Edit/{pinecone.Guid}";
                NavigationManager.NavigateTo(url);
            }
        }
    }

    private void OpenFile(Guid guid)
    {
        var url = $"/Edit/{guid}";
        NavigationManager.NavigateTo(url);
    }

    private async Task ToggleVisibility(Guid guid, bool isPublic)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/Pinecones/toggle-visibility/{guid}", new { IsPublic = isPublic });
            if (response.IsSuccessStatusCode)
            {
                // Update the local collection after successful API call
                var item = PinetreeViews.FirstOrDefault(p => p.Guid == guid);
                if (item != null)
                {
                    item.IsPublic = isPublic;
                    StateHasChanged();
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to update visibility: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating visibility: {ex.Message}");
        }
    }

    private async Task ConfirmDelete(Guid guid)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
        if (!confirmed) return;

        var response = await Http.DeleteAsync($"/api/Pinecones/delete-include-child/{guid}?deleteType=bulk");
        if (!response.IsSuccessStatusCode) return;

        var itemToRemove = PinetreeViews.FirstOrDefault(p => p.Guid == guid);
        if (itemToRemove == null) return;

        PinetreeViews.Remove(itemToRemove);
        TotalRecords--;
        TotalPages = (int)Math.Ceiling(TotalRecords / (double)PageSize);

        // If current page is empty and not the first page, go to previous page
        if (!PinetreeViews.Any() && CurrentPage > 1)
        {
            CurrentPage--;
            await LoadDocuments();
        }
        else
        {
            StateHasChanged();
        }
    }

    private async Task LoadFilesAsync()
    {
        try
        {
            files = await Http.GetFromJsonAsync<List<UserBlobViewModel>>("api/Images/list");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to load file list: {ex.Message}");
        }
    }

    private async Task LoadStorageUsageAsync()
    {
        try
        {
            storageUsage = await Http.GetFromJsonAsync<UserFiles>("api/Images/usage");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to load storage usage: {ex.Message}");
        }
    }

    private async Task DeleteFile(int id)
    {
        var fileToDelete = files?.FirstOrDefault(f => f.Id == id);
        if (fileToDelete == null) return;

        string confirmMessage;
        if (IsProfileIcon(fileToDelete))
        {
            confirmMessage = "This is your profile icon. Deleting it will also remove it from your profile. Are you sure you want to continue?";
        }
        else
        {
            confirmMessage = "Are you sure you want to delete this file?";
        }

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage);
        if (!confirmed) return;

        try
        {
            var response = await Http.DeleteAsync($"api/Images/{id}");
            if (response.IsSuccessStatusCode)
            {
                // Profile icon status will be automatically updated on next file list load
                await LoadFilesAsync();
                await LoadStorageUsageAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error during deletion: {ex.Message}");
        }
    }

    private string FormatBytes(long bytes)
    {
        string[] suffix = { "B", "KB", "MB", "GB", "TB" };
        int i;
        double dblBytes = bytes;
        for (i = 0; i < suffix.Length && bytes >= 1024; i++, bytes /= 1024)
        {
            dblBytes = bytes / 1024.0;
        }
        return $"{dblBytes:0.##} {suffix[i]}";
    }

    private bool IsImageFile(string contentType)
    {
        return contentType.StartsWith("image/");
    }
    public void Dispose()
    {
        searchDebounceTimer?.Dispose();
    }

    // Trash functionality methods
    private async Task LoadDeletedFiles()
    {
        try
        {
            isLoadingTrash = true;
            StateHasChanged();

            var response = await Http.GetAsync("api/Pinecones/get-deleted-files?pageNumber=1&pageSize=100");
            if (response.IsSuccessStatusCode)
            {
                deletedFiles = await response.Content.ReadFromJsonAsync<List<PineconeViewModel>>();
            }
            else
            {
                deletedFiles = new List<PineconeViewModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading deleted files: {ex.Message}");
            deletedFiles = new List<PineconeViewModel>();
        }
        finally
        {
            isLoadingTrash = false;
            StateHasChanged();
        }
    }

    private async Task RestoreFile(Guid fileId)
    {
        try
        {
            isRestoringFile = true;
            StateHasChanged(); var response = await Http.PostAsync($"api/Pinecones/restore-file/{fileId}", null);
            if (response.IsSuccessStatusCode)
            {
                await LoadDeletedFiles(); // Refresh the list
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error restoring file: {ex.Message}");
        }
        finally
        {
            isRestoringFile = false;
            StateHasChanged();
        }
    }

    private async Task PermanentlyDeleteFile(Guid fileId)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to permanently delete this file? This action cannot be undone.");
            if (!confirmed) return;

            isDeletingFile = true;
            StateHasChanged(); var response = await Http.DeleteAsync($"api/Pinecones/permanently-delete-file/{fileId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadDeletedFiles(); // Refresh the list
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error permanently deleting file: {ex.Message}");
        }
        finally
        {
            isDeletingFile = false;
            StateHasChanged();
        }
    }

    private class UserFiles
    {
        public long used { get; set; }
        public long quota { get; set; }
        public double percentage { get; set; }
    }

    private class PaginationResult
    {
        public int TotalRecords { get; set; }
        public int TotalPages { get; set; }
    }

    private class UserDocumentsResponse
    {
        public List<PineconeViewModel> Documents { get; set; } = new();
        public int TotalRecords { get; set; }
        public int TotalPages { get; set; }
        public int CurrentPage { get; set; }
        public int PageSize { get; set; }
    }
}
