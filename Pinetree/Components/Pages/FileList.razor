@page "/FileList/{userId}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Pinetree.Components.Services
@using Pinetree.Components.Components
@using Pinetree.Data
@using Pinetree.Model
@using System.Security.Claims
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<div class="editor-container">
    <div class="row">
        <div class="col-2">
            <div class="list-group">
                <button type="button" class="list-group-item list-group-item-action" @onclick="CreateFile">
                    <i class="bi bi-file-earmark-plus"></i> Create File
                </button>
            </div>
        </div>
        <div class="col-10">
            <div class="row">
            @foreach (var pinecone in Pinecones)
                {
                    <div class="col-md-3 mb-4">
                        <div class="card file-item">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">@pinecone.Title</h5>
                                    </div>
                                    <div class="dropdown">
                                        <button class="btn btn-light btn-sm dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="bi bi-three-dots"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton">
                                            <li><a class="dropdown-item" href="#" @onclick="() => OpenFile(pinecone.Id)">Open</a></li>
                                            <li><a class="dropdown-item" href="#" @onclick="() => DeletePinecone(pinecone.Id)">Delete</a></li>
                                        </ul>
                                    </div>
                                </div>
                                <p class="card-text">@(pinecone.Content.Length < 100 ? pinecone.Content : pinecone.Content[0..100])</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <style>
        .card-text {
        height: 3em;
        overflow: hidden; 
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        }
    </style>
    @if (TotalPages > 1)
    {
        <nav>
            <ul class="pagination justify-content-center">
                @for (int i = 1; i <= TotalPages; i++)
                {
                    <li class="page-item @(i == CurrentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => LoadPage(i)">@i</button>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

@code {
    [Parameter]
    public string UserId { get; set; } = "";

    private List<Pinecone> Pinecones { get; set; } = new List<Pinecone>();
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 100;
    private int TotalPages { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var currentUserId = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
            if (currentUserId == null || currentUserId != UserId)
            {
                Navigation.NavigateTo("/");
            }
            await LoadPage(CurrentPage);
        }
    }

    private async Task CreateFile()
    {
        var url = await new PineconeService(DbContext).CreatePineconeAsync(UserId);
        Navigation.NavigateTo(url);
    }

    private async Task LoadPage(int pageNumber)
    {
        CurrentPage = pageNumber;
        var query = DbContext.Pinecone.Where(x => x.UserId == UserId && x.ParentId == null);
        TotalPages = (int)Math.Ceiling(await query.CountAsync() / (double)PageSize);
        Pinecones = await query.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToListAsync();
        StateHasChanged();
    }

    private void OpenFile(long id)
    {
        var url = $"/markdown-editor/{UserId}/{id}";
        Navigation.NavigateTo(url);
    }

    private async Task DeletePinecone(long id)
    {
        var pinecone = await DbContext.Pinecone.FindAsync(id);
        if (pinecone == null) return;

        DbContext.Pinecone.Remove(pinecone);
        await DbContext.SaveChangesAsync();
        Pinecones.Remove(pinecone);
        StateHasChanged();
    }
}
