@page "/{UserName}/List"
@attribute [Authorize]

@using Markdig
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Pinetree.Components.Services
@using Pinetree.Components.Components
@using Pinetree.Data
@using Pinetree.Model
@using System.Security.Claims
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@inject IJSRuntime JS

<div class="editor-container">
    <div class="row">
        <div class="col-2">
            <div class="list-group">
                <button type="button" class="list-group-item list-group-item-action" @onclick="CreateFile">
                    <i class="bi bi-file-earmark-plus"></i> Create File
                </button>
            </div>
        </div>
        <div class="col-10">
            <div class="d-flex flex-wrap">
                @foreach (var pinecone in Pinecones)
                {
                    <div class="card m-2" style="width:12rem; height: 16rem">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex justify-content-between">
                                <strong class="card-title" @onclick="() => OpenFile(pinecone.Id)" style="cursor:pointer">
                                    <i class="bi bi-file-earmark-text"></i>
                                    @pinecone.Title
                                </strong>
                                <i @onclick="() => ConfirmDelete(pinecone.Id)" class="bi bi-trash2 border px-1" style="cursor:pointer"></i>
                            </div>
                            <p class="card-text flex-grow-1" @onclick="() => OpenFile(pinecone.Id)" style="cursor:pointer">@((MarkupString)GetContent(pinecone.Content))</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    @if (TotalPages > 1)
    {
        <nav>
            <ul class="pagination justify-content-center">
                @for (int i = 1; i <= TotalPages; i++)
                {
                    <li class="page-item @(i == CurrentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => LoadPage(i)">@i</button>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

@code {
    [Parameter]
    public string UserName { get; set; } = "";

    private List<Pinecone> Pinecones { get; set; } = new List<Pinecone>();
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 100;
    private int TotalPages { get; set; }

    private string GetContent(string content)
    {
        var c = (content.Length < 100) ? content : content[..100];
        return MarkdownService.ToHtml(c);
    }

    protected override async Task OnInitializedAsync()
    {
        var identity = await AuthenticationStateProvider.GetIdentityAsync();
        if (identity == null || identity.Name != UserName)
        {
            Navigation.NavigateTo("/");
        }
        await LoadPage(CurrentPage);
    }

    private async Task LoadPage(int pageNumber)
    {
        CurrentPage = pageNumber;
        TotalPages = (int)Math.Ceiling(await DbContext.GetUserTopCountAsync(UserName) / (double)PageSize);
        Pinecones = await DbContext.GetUserTopListAsync(UserName, CurrentPage, PageSize);
        StateHasChanged();
    }

    private async Task CreateFile()
    {
        var pinecone = await DbContext.AddTopAsync(UserName);
        var url = $"/{UserName}/Edit/{pinecone.Id}";
        Navigation.NavigateTo(url);
    }

    private void OpenFile(long id)
    {
        var url = $"/{UserName}/Edit/{id}";
        Navigation.NavigateTo(url);
    }

    private async Task ConfirmDelete(long id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
        if (confirmed)
        {
            var pinecone = await DbContext.DeleteIncludeChildAsync(id);
            Pinecones.Remove(pinecone);
            StateHasChanged();
        }
    }
}
