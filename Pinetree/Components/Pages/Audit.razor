@page "/audit"
@using Microsoft.AspNetCore.Authorization
@using Pinetree.Services
@using Pinetree.Models
@using Pinetree.Shared
@using System.Globalization
@attribute [Authorize(Roles = Roles.Admin)]
@inject IAuditLogService AuditLogService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Audit Log Management</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-shield-alt me-2"></i>
                        Audit Log Management
                    </h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-success btn-sm" @onclick="ExportToCsv" disabled="@isLoading">
                            <i class="fas fa-download me-1"></i>
                            Export CSV
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Search and Filter Section -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label for="searchTerm" class="form-label">Search</label>
                            <input type="text" id="searchTerm" class="form-control" @bind="searchTerm" @bind:event="oninput" 
                                   placeholder="Search path, user, or IP..." />
                        </div>
                        <div class="col-md-2">
                            <label for="startDate" class="form-label">Start Date</label>
                            <input type="datetime-local" id="startDate" class="form-control" @bind="startDate" @bind:event="onchange" />
                        </div>
                        <div class="col-md-2">
                            <label for="endDate" class="form-label">End Date</label>
                            <input type="datetime-local" id="endDate" class="form-control" @bind="endDate" @bind:event="onchange" />
                        </div>
                        <div class="col-md-2">
                            <label for="statusCode" class="form-label">Status Code</label>
                            <select id="statusCode" class="form-select" @bind="selectedStatusCode" @bind:event="onchange">
                                <option value="">All</option>
                                <option value="200">200 - OK</option>
                                <option value="400">400 - Bad Request</option>
                                <option value="401">401 - Unauthorized</option>
                                <option value="403">403 - Forbidden</option>
                                <option value="404">404 - Not Found</option>
                                <option value="500">500 - Server Error</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label for="pageSize" class="form-label">Page Size</label>
                            <select id="pageSize" class="form-select" @bind="pageSize" @bind:event="onchange">
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </div>
                        <div class="col-md-1 d-flex align-items-end">
                            <button type="button" class="btn btn-primary" @onclick="LoadAuditLogs" disabled="@isLoading">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Loading Indicator -->
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Results Summary -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <p class="text-muted">
                                    Showing @auditLogs.Count() of @totalCount records
                                    @if (currentPage > 1 || totalCount > pageSize)
                                    {
                                        <span>(Page @currentPage of @((int)Math.Ceiling((double)totalCount / pageSize)))</span>
                                    }
                                </p>
                            </div>
                        </div>

                        <!-- Audit Log Table -->
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">                                <thead class="table-dark">
                                    <tr>
                                        <th style="width: 150px;">Timestamp</th>
                                        <th style="width: 80px;">Method</th>
                                        <th>Path</th>
                                        <th style="width: 120px;">User</th>
                                        <th style="width: 120px;">IP Address</th>
                                        <th style="width: 80px;">Status</th>
                                        <th style="width: 80px;">Time (ms)</th>
                                        <th style="width: 100px;">Category</th>
                                        <th style="width: 80px;">Priority</th>
                                        <th style="width: 60px;">Success</th>
                                        <th style="width: 100px;">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var log in auditLogs)
                                    {
                                        <tr class="@GetRowClass(log)">
                                            <td>
                                                <small>@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</small>
                                            </td>
                                            <td>
                                                <span class="badge @GetMethodBadgeClass(log.HttpMethod)">
                                                    @log.HttpMethod
                                                </span>
                                            </td>
                                            <td>
                                                <span title="@($"{log.RequestPath}{log.QueryString}")">
                                                    @(TruncateString(log.RequestPath, 50))
                                                </span>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(log.UserName))
                                                {
                                                    <span title="@log.UserId">@log.UserName</span>
                                                    @if (!string.IsNullOrEmpty(log.UserRole))
                                                    {
                                                        <br /><small class="text-muted">@log.UserRole</small>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Anonymous</span>
                                                }
                                            </td>
                                            <td>
                                                <small>@log.IpAddress</small>
                                            </td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(log.StatusCode)">
                                                    @log.StatusCode
                                                </span>
                                            </td>                                            <td>
                                                @log.ResponseTimeMs
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(log.AuditCategory))
                                                {
                                                    <span class="badge @GetCategoryBadgeClass(log.AuditCategory)">
                                                        @log.AuditCategory
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(log.Priority))
                                                {
                                                    <span class="badge @GetPriorityBadgeClass(log.Priority)">
                                                        @log.Priority
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                @if (log.IsSuccess)
                                                {
                                                    <i class="fas fa-check-circle text-success"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-times-circle text-danger"></i>
                                                }
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-sm btn-outline-info" 
                                                        @onclick="() => ShowDetails(log)">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (totalCount > pageSize)
                        {
                            <nav aria-label="Audit log pagination">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <a class="page-link" href="#" @onclick="() => ChangePage(currentPage - 1)" 
                                           @onclick:preventDefault="true">Previous</a>
                                    </li>

                                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(GetTotalPages(), currentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == currentPage ? "active" : "")">
                                            <a class="page-link" href="#" @onclick="() => ChangePage(i)" 
                                               @onclick:preventDefault="true">@i</a>
                                        </li>
                                    }

                                    <li class="page-item @(currentPage == GetTotalPages() ? "disabled" : "")">
                                        <a class="page-link" href="#" @onclick="() => ChangePage(currentPage + 1)" 
                                           @onclick:preventDefault="true">Next</a>
                                    </li>
                                </ul>
                            </nav>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Detail Modal -->
@if (selectedLog != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Audit Log Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseDetails"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Timestamp:</strong> @selectedLog.Timestamp.ToString("yyyy-MM-dd HH:mm:ss.fff")
                        </div>
                        <div class="col-md-6">
                            <strong>Method:</strong> @selectedLog.HttpMethod
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-12">
                            <strong>Request Path:</strong> @selectedLog.RequestPath
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedLog.QueryString))
                    {
                        <div class="row mt-2">
                            <div class="col-12">
                                <strong>Query String:</strong> @selectedLog.QueryString
                            </div>
                        </div>
                    }
                    <div class="row mt-2">
                        <div class="col-md-6">
                            <strong>IP Address:</strong> @selectedLog.IpAddress
                        </div>
                        <div class="col-md-6">
                            <strong>Status Code:</strong> @selectedLog.StatusCode
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-6">
                            <strong>Response Time:</strong> @selectedLog.ResponseTimeMs ms
                        </div>
                        <div class="col-md-6">
                            <strong>Success:</strong> @(selectedLog.IsSuccess ? "Yes" : "No")
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedLog.UserName))
                    {
                        <div class="row mt-2">
                            <div class="col-md-6">
                                <strong>User:</strong> @selectedLog.UserName
                            </div>
                            <div class="col-md-6">
                                <strong>User ID:</strong> @selectedLog.UserId
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(selectedLog.UserRole))
                        {
                            <div class="row mt-2">
                                <div class="col-12">
                                    <strong>User Role:</strong> @selectedLog.UserRole
                                </div>
                            </div>
                        }
                    }
                    @if (!string.IsNullOrEmpty(selectedLog.UserAgent))
                    {
                        <div class="row mt-2">
                            <div class="col-12">
                                <strong>User Agent:</strong> @selectedLog.UserAgent
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(selectedLog.ErrorMessage))
                    {
                        <div class="row mt-2">
                            <div class="col-12">
                                <strong>Error Message:</strong> 
                                <div class="alert alert-danger mt-1">@selectedLog.ErrorMessage</div>
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(selectedLog.AdditionalData))
                    {
                        <div class="row mt-2">
                            <div class="col-12">
                                <strong>Additional Data:</strong>
                                <pre class="mt-1" style="background-color: #f8f9fa; padding: 10px; border-radius: 4px;">@selectedLog.AdditionalData</pre>
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(selectedLog.HashValue))
                    {
                        <div class="row mt-2">
                            <div class="col-12">
                                <strong>Hash Value:</strong> 
                                <small class="text-muted">@selectedLog.HashValue</small>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDetails">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<AuditLog> auditLogs = new List<AuditLog>();
    private int totalCount = 0;
    private int currentPage = 1;
    private int pageSize = 50;
    private bool isLoading = false;
    
    private string searchTerm = "";
    private DateTime? startDate = null;
    private DateTime? endDate = null;
    private string selectedStatusCode = "";
    
    private AuditLog? selectedLog = null;
    
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadAuditLogs();
    }

    private async Task LoadAuditLogs()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            int? statusCode = null;
            if (!string.IsNullOrEmpty(selectedStatusCode) && int.TryParse(selectedStatusCode, out int parsedStatus))
            {
                statusCode = parsedStatus;
            }

            var result = await AuditLogService.GetLogsAsync(
                currentPage, pageSize, searchTerm, startDate, endDate, null, statusCode);
            
            auditLogs = result.logs;
            totalCount = result.totalCount;
        }
        catch (Exception ex)
        {
            // Log error or show notification
            Console.WriteLine($"Error loading audit logs: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > GetTotalPages()) return;
        
        currentPage = page;
        await LoadAuditLogs();
    }

    private int GetTotalPages()
    {
        return (int)Math.Ceiling((double)totalCount / pageSize);
    }

    private async Task ExportToCsv()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            int? statusCode = null;
            if (!string.IsNullOrEmpty(selectedStatusCode) && int.TryParse(selectedStatusCode, out int parsedStatus))
            {
                statusCode = parsedStatus;
            }

            var csvData = await AuditLogService.ExportToCsvAsync(searchTerm, startDate, endDate, null, statusCode);
            
            var fileName = $"audit-log-{DateTime.Now:yyyyMMdd-HHmmss}.csv";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "text/csv", Convert.ToBase64String(csvData));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting CSV: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowDetails(AuditLog log)
    {
        selectedLog = log;
        StateHasChanged();
    }

    private void CloseDetails()
    {
        selectedLog = null;
        StateHasChanged();
    }

    private string GetRowClass(AuditLog log)
    {
        if (!log.IsSuccess)
            return "table-danger";
        if (log.StatusCode >= 300 && log.StatusCode < 400)
            return "table-warning";
        return "";
    }

    private string GetMethodBadgeClass(string method)
    {
        return method.ToUpper() switch
        {
            "GET" => "bg-primary",
            "POST" => "bg-success",
            "PUT" => "bg-warning",
            "DELETE" => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    private string GetStatusBadgeClass(int statusCode)
    {
        return statusCode switch
        {
            >= 200 and < 300 => "bg-success",
            >= 300 and < 400 => "bg-warning",
            >= 400 and < 500 => "bg-danger",
            >= 500 => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetCategoryBadgeClass(string category)
    {
        return category switch
        {
            "Authentication" => "bg-primary",
            "User Management" => "bg-info",
            "Configuration" => "bg-warning",
            "File Operations" => "bg-success",
            "Data Modification" => "bg-danger",
            "Business Operations" => "bg-dark",
            "Data Access" => "bg-secondary",
            "System Error" => "bg-danger",
            "Client Error" => "bg-warning",
            _ => "bg-light text-dark"
        };
    }

    private string GetPriorityBadgeClass(string priority)
    {
        return priority switch
        {
            "Highest" => "bg-danger",
            "High" => "bg-warning",
            "Medium" => "bg-info",
            "Low" => "bg-secondary",
            _ => "bg-light text-dark"
        };
    }

    private string TruncateString(string value, int maxLength)
    {
        if (string.IsNullOrEmpty(value) || value.Length <= maxLength)
            return value;
        return value.Substring(0, maxLength) + "...";
    }

    private void DisposeSearchTimer()
    {
        searchTimer?.Dispose();
        searchTimer = null;
    }

    public void Dispose()
    {
        DisposeSearchTimer();
    }
}
