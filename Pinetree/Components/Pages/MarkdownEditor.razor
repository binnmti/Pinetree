@page "/markdown-editor"
@using Markdig
@using Pinetree.Data
@using Pinetree.Model
@inject IJSRuntime JS
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext

<div class="editor-container">
    <div class="title">
        <input @bind="Context" @oninput="OnInputChange">@Title</input>
        <button @onclick="SaveText" class="btn btn-primary">Save</button>
    </div>
    <div class="editor">
        <textarea @bind="Context" @oninput="OnInputChange" class="markdown-input" placeholder="Write your markdown here...">@MarkdownText</textarea>
    </div>

    <div class="preview">
        @((MarkupString)MarkdownText)
    </div>
</div>

@code {
    private string Context { get; set; } = "";
    private string Title { get; set; } = "";

    private string MarkdownText = "";

    private void SaveText()
    {
        var pinecone = new Pinecone() { Content = Context, ParentId = -1, Title = Title };
        DbContext.Pinecone.Add(pinecone);
        DbContext.SaveChanges();
        // await JS.InvokeVoidAsync("localStorage.setItem", "savedMarkdown", markdownText);
        // await JS.InvokeVoidAsync("alert", "Markdown text saved!");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // This ensures the JavaScript interop only happens after the component is rendered.
        if (firstRender)
        {
            // var savedMarkdown = await JS.InvokeAsync<string>("localStorage.getItem", "savedMarkdown");
            // if (!string.IsNullOrEmpty(savedMarkdown))
            // {
            //     markdownText = savedMarkdown;
            //     StateHasChanged();  // Trigger re-rendering after setting the savedMarkdown
            // }
        }
    }

    private void OnInputChange(ChangeEventArgs e)
    {
        Context = e.Value?.ToString() ?? "";
        MarkdownText = Markdown.ToHtml(Context);

        StateHasChanged();
    }

    private void SaveText()
    {
        // await JS.InvokeVoidAsync("localStorage.setItem", "savedMarkdown", markdownText);
        // await JS.InvokeVoidAsync("alert", "Markdown text saved!");
    }


}
