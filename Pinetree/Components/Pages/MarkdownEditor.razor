@page "/markdown-editor/{userId}/{id:long}"

@using Markdig
@using Pinetree.Components.Components
@using Pinetree.Data
@using Pinetree.Model
@using System.Diagnostics;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IJSRuntime JS
@inject ApplicationDbContext DbContext
@inject ProtectedLocalStorage ProtectedLocalStore
@rendermode InteractiveServer

<div class="editor-container">
    <div class="markdown-title">
        <input @bind="Title" placeholder="Untitled" />
        <button @onclick="SaveText">Save</button>
    </div>
    <div class="markdown-editor">
        <div class="pinetree-view">
            <PineTreeView UserId="@(UserId)" PineTree="@(PineTree)" />
        </div>
        <div class="editor">
            <textarea @oninput="OnInputChange" class="markdown-input" placeholder="Write your markdown here...">@Context</textarea>
        </div>
        <div class="preview">
            @((MarkupString)MarkdownText)
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string UserId { get; set; } = "";

    [Parameter]
    public long Id { get; set; }

    public required PineTree PineTree { get; set; }

    private string Context { get; set; } = "";
    private string Title { get; set; } = "";
    private string MarkdownText = "";

    private void SaveText()
    {
        var hit = DbContext.Pinecone.Single(x => x.Id == Id);
        hit.Title = Title;
        hit.Content = Context;
        DbContext.SaveChanges();
        PineTree = PinneconeConvert.ToPineTree(DbContext.Pinecone.Where(x => x.GroupId == hit.GroupId).ToList());
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userIds = DbContext.Pinecone.Where(x => x.UserId == UserId);
            var groupId = userIds.Single(x => x.Id == Id).GroupId;
            var pinecones = userIds.Where(x => x.GroupId == groupId).ToList();
            PineTree = PinneconeConvert.ToPineTree(pinecones);

            var result = await ProtectedLocalStore.GetAsync<string>("Context");
            if (result.Success && !string.IsNullOrEmpty(result.Value))
            {
                Context = result.Value;
                MarkdownText = Markdown.ToHtml(Context);
            }

            StateHasChanged();
        }
    }

    private async Task OnInputChange(ChangeEventArgs e)
    {
        Context = e.Value?.ToString() ?? "";
        MarkdownText = Markdown.ToHtml(Context);

        await ProtectedLocalStore.SetAsync("Context", Context);
        StateHasChanged();
    }
}
