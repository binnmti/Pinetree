@page "/markdown-editor/{id:int?}"
@using Markdig
@using Pinetree.Components.Components
@using Pinetree.Data
@using Pinetree.Model
@inject IJSRuntime JS
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

<div class="editor-container">
    <div class="markdown-title">
        <input @bind="Title"></input>
        <button @onclick="SaveText">Save</button>
    </div>
    <div class="markdown-editor">
        <div class="pinetree-view">
            <PineTreeView PineTree="@(PineTree)" />
        </div>
        <div class="editor">
            <textarea @oninput="OnInputChange" class="markdown-input" placeholder="Write your markdown here...">@Context</textarea>
        </div>
        <div class="preview">
            @((MarkupString)MarkdownText)
        </div>
    </div>
</div>

@code {
    [Parameter]
    public long Id { get; set; }

    public required PineTree PineTree { get; set; }
    private string Context { get; set; } = "";
    private string Title { get; set; } = "";
    private string MarkdownText = "";

    private void SaveText()
    {
        var pinecone = new Pinecone() { Title = Title, Content = Context, GroupId = -1, ParentId = null, UserId = "" };
        DbContext.Pinecone.Add(pinecone);
        DbContext.SaveChanges();
        pinecone.GroupId = pinecone.Id;
        DbContext.SaveChanges();

        PineTree = PinneconeConvert.ToPineTree(pinecone.Id, DbContext.Pinecone.Where(x => x.GroupId == pinecone.Id).ToList());
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var hits = DbContext.Pinecone.Where(x => x.GroupId == Id);
            PineTree = PinneconeConvert.ToPineTree(Id, hits?.ToList() ?? new List<Pinecone>());
            var result = await ProtectedLocalStore.GetAsync<string>("Context");
            if (result.Success && !string.IsNullOrEmpty(result.Value))
            {
                Context = result.Value;
                MarkdownText = Markdown.ToHtml(Context);
            }
            StateHasChanged();
        }
    }

    private async Task OnInputChange(ChangeEventArgs e)
    {
        Context = e.Value?.ToString() ?? "";
        MarkdownText = Markdown.ToHtml(Context);

        await ProtectedLocalStore.SetAsync("Context", Context);
        StateHasChanged();
    }
}
