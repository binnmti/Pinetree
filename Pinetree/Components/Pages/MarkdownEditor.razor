@page "/markdown-editor/{userId}/{id:long}"

@using Markdig
@using Microsoft.EntityFrameworkCore
@using Pinetree.Components.Components
@using Pinetree.Data
@using Pinetree.Model
@using System.Diagnostics;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IJSRuntime JS
@inject ApplicationDbContext DbContext
@inject ProtectedLocalStorage ProtectedLocalStore
@rendermode InteractiveServer
<div class="editor-container">
    <div class="row">
        <div class="col-2 border">
            <div class="pinetree-view">
                <PineTreeView UserId="@(UserId)" PineTree="@(PineTree)" />
            </div>
        </div>
        <div class="col-10">
            <div class="markdown-title" >
                <input @bind="@(Title)" @oninput="OnInputTitleChange" placeholder="Untitled" style="width:100%" />
            </div>
            <div class="row" style="height:90vh;">
                <div class="col py-2">
                    <textarea @bind="@(Context)" style="width:100%; height:100%" @oninput="OnInputChange" placeholder="Write your markdown here..."></textarea>
                </div>
                <div class="col py-2">
                    <p class="border" style="width:100%; height:100%">@((MarkupString)MarkdownText)</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string UserId { get; set; } = "";

    [Parameter]
    public long Id { get; set; }

    MarkupString markupString = new MarkupString("");

    public required PineTree PineTree { get; set; }

    private string Context { get; set; } = "";
    private string Title { get; set; } = "";
    private string MarkdownText = "";
    private CancellationTokenSource DebounceToken = new CancellationTokenSource();
    private List<Pinecone> Pinecones = new List<Pinecone>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var userPinecones = DbContext.Pinecone.Where(x => x.UserId == UserId);
                var groupId = (await userPinecones.SingleAsync(x => x.Id == Id)).GroupId;
                Pinecones = await userPinecones.Where(x => x.GroupId == groupId).ToListAsync();
            }
            catch(Exception ex)
            {
                Console.Error.WriteLine($"Error DbContext: {ex.Message}");
                return;
            }

            var hit = Pinecones.Single(x => x.Id == Id);
            Title = hit.Title;
            Context = hit.Content;
            MarkdownText = Markdown.ToHtml(Context);
            PineTree = PinneconeConvert.ToPineTree(Pinecones);
            StateHasChanged();
        }
    }

    private async Task OnInputTitleChange(ChangeEventArgs e)
    {
        Title = e.Value?.ToString() ?? "";
        await DebounceSaveAsync();
    }

    private async Task OnInputChange(ChangeEventArgs e)
    {
        Context = e.Value?.ToString() ?? "";
        MarkdownText = Markdown.ToHtml(Context);
        await DebounceSaveAsync();
    }

    private async Task DebounceSaveAsync()
    {
        DebounceToken.Cancel();
        DebounceToken = new CancellationTokenSource();
        var token = DebounceToken.Token;
        try
        {
            await Task.Delay(500, token);
            if (!token.IsCancellationRequested)
            {
                var hit = Pinecones.Single(x => x.Id == Id);
                hit.Title = Title;
                hit.Content = Context;
                await DbContext.SaveChangesAsync();

                PineTree = PinneconeConvert.ToPineTree(Pinecones);
                StateHasChanged();
            }
        }
        catch (TaskCanceledException) { }
        StateHasChanged();
    }
}
