@page "/{userId}/Edit/{id:long}"

@using Microsoft.AspNetCore.Authorization
@using Markdig
@using Microsoft.EntityFrameworkCore
@using Pinetree.Components.Components
@using Pinetree.Components.Services
@using Pinetree.Data
@using Pinetree.Model
@using System.Diagnostics;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Security.Claims
@inject IJSRuntime JS
@inject ApplicationDbContext DbContext
@inject ProtectedLocalStorage ProtectedLocalStore
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@implements IDisposable

<div class="editor-container">
    @if (!IsAuthenticated)
    {
        <div class="row">
            <div class="col">
                <div class="alert alert-primary" role="alert">
                    <i class="bi bi-info-circle-fill"></i>
                    If you want to create multiple files, please <a href="Account/Register" class="alert-link">register</a>.
                </div>
            </div>
        </div>
    }
    <div class="row">
        <div class="col-2 border">
            <div class="pinetree-view">
                @if (IsAuthenticated)
                {
                    <div class="list-group">
                        <button type="button" class="list-group-item list-group-item-action" @onclick="OnFileListClick">
                            <i class="bi bi-card-list" aria-hidden="true"></i> File List
                        </button>
                    </div>
                }
                <div class="list-group" style="overflow-x:auto">
                    <PineTreeView UserId="@(UserId)" PineTree="@(PineTree)" Id="@(Id)" OnChildEvent="SetCurrent" />
                </div>
            </div>
        </div>
        <div class="col-10">
            <div class="markdown-title">
                <input @bind="@(Title)" @oninput="OnInputTitleChange" placeholder="Untitled" style="width:100%" />
            </div>
            <div class="row" style="height:90vh;">
                <div class="col py-2">
                    <textarea @bind="@(Content)" style="width:100%; height:100%" @oninput="OnInputChange" placeholder="Write your markdown here..."></textarea>
                </div>
                <div class="col py-2">
                    <p class="border" style="width:100%; height:100%">@((MarkupString)MarkdownText)</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string UserId { get; set; } = "";

    [Parameter]
    public long Id { get; set; }

    private PineTree PineTree { get; set; } = new PineTree(0, "", "", null, 0);
    private PineTree Current { get; set; } = new PineTree(0, "", "", null, 0);
    private string Content { get; set; } = "";
    private string Title { get; set; } = "";
    private string MarkdownText { get; set; } = "";
    private bool IsAuthenticated { get; set; }
    private CancellationTokenSource DebounceToken { get; set; } = new CancellationTokenSource();

    public void Dispose()
    {
        DebounceToken?.Cancel();
        DebounceToken?.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // Since it is related to screen drawing, set it in OnInitializedAsync.
        IsAuthenticated = user.Identity != null && user.Identity.IsAuthenticated;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsAuthenticated)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var currentUserId = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
            if (currentUserId == null || currentUserId != UserId)
            {
                Navigation.NavigateTo("/");
                return;
            }
        }

        if (firstRender)
        {
            try
            {
                var hit = await DbContext.SingleIncludeChildAsync(Id);
                if (hit == null)
                {
                    Navigation.NavigateTo("/");
                    return;
                }
                PineTree = hit.ToPineTreeIncludeChild();
                SetCurrent(Id);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"An error occurred while fetching data: {ex.Message}");
                Navigation.NavigateTo("/");
                return;
            }
            StateHasChanged();
        }
    }

    private async Task OnInputTitleChange(ChangeEventArgs e)
    {
        Title = e.Value?.ToString() ?? "";
        Current.Title = Title;
        await DebounceSaveAsync();
        StateHasChanged();
    }

    private async Task OnInputChange(ChangeEventArgs e)
    {
        Content = e.Value?.ToString() ?? "";
        MarkdownText = MarkdownService.ToHtml(Content);
        Current.Content = Content;
        await DebounceSaveAsync();
        StateHasChanged();
    }

    private void OnFileListClick()
    {
        Navigation.NavigateTo($"/{UserId}/List");
    }

    private async Task DebounceSaveAsync()
    {
        DebounceToken.Cancel();
        DebounceToken = new CancellationTokenSource();
        var token = DebounceToken.Token;
        try
        {
            await Task.Delay(500, token);
        }
        catch (TaskCanceledException ex)
        {
            Console.Error.WriteLine($"Task was canceled: {ex.Message}");
            return;
        }
        if (token.IsCancellationRequested) return;
        try
        {
            await DbContext.UpdateAsync(Id, Title, Content);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while saving changes: {ex.Message}");
            return;
        }
        StateHasChanged();
    }

    private void SetCurrent(long id)
    {
        Id = id;
        Current = PineTree.SetCurrentIncludeChild(id);
        Title = Current.Title;
        Content = Current.Content;
        MarkdownText = MarkdownService.ToHtml(Content);
        StateHasChanged();
    }
}
