@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Pinetree.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <div>
        <p>
            Currently, there are no external authentication services available.
        </p>
    </div>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <p>
                @foreach (var provider in externalLogins)
                {
                    if (provider.Name.Contains("Google"))
                    {
                        <button type="submit" class="btn google-btn" name="provider" value="@provider.Name">
                            <img src="branding_guideline_sample_lt_sq_lg.svg" alt="Google logo" width="200" height="40" />
                        </button>
                    }
                    else if (provider.Name.Contains("Microsoft"))
                    {
                        <button type="submit" class="btn microsoft-btn" name="provider" value="@provider.Name">
                            <img src="ms-symbollockup_signin_light.svg" alt="Microsoft logo" width="200" height="40" />
                        </button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                    }
                }
            </p>
        </div>
    </form>
}



<script src="https://accounts.google.com/gsi/client" async></script>

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}
