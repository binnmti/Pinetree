@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Pinetree.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <div>
        <p>
            Currently, there are no external authentication services available.
        </p>
    </div>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <div class="auth-container">
                @foreach (var provider in externalLogins)
                {
                    if (provider.Name.Contains("Google"))
                    {
                        <button type="submit" class="auth-button google-button" name="provider" value="@provider.Name">
                            <div class="auth-button-content">
                                <img src="google.svg" alt="Google logo" class="auth-icon" />
                                <span class="auth-text">Sign in with Google</span>
                            </div>
                        </button>
                    }
                    else if (provider.Name.Contains("Facebook"))
                    {
                        <button type="submit" class="auth-button facebook-button" name="provider" value="@provider.Name">
                            <div class="auth-button-content">
                                <img src="facebook.png" alt="Facebook logo" class="auth-icon" />
                                <span class="auth-text">Continue with Facebook</span>
                            </div>
                        </button>
                    }
                    else if (provider.Name.Contains("GitHub"))
                    {
                        <button type="submit" class="auth-button github-button" name="provider" value="@provider.Name">
                            <div class="auth-button-content">
                                <img src="github.png" alt="GitHub logo" class="auth-icon" />
                                <span class="auth-text">Sign in with GitHub</span>
                            </div>
                        </button>
                    }
                    else if (provider.Name.Contains("Microsoft"))
                    {
                        <button type="submit" class="auth-button microsoft-button" name="provider" value="@provider.Name">
                            <div class="auth-button-content">
                                <img src="microsoft.png" alt="Microsoft logo" class="auth-icon" />
                                <span class="auth-text">Sign in with Microsoft</span>
                            </div>
                        </button>
                    }
                    else
                    {
                        <button type="submit" class="auth-button default-button" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">
                            <div class="auth-button-content">
                                <span class="auth-text">@provider.DisplayName</span>
                            </div>
                        </button>
                    }
                }
            </div>
        </div>
    </form>
}

<style>
    .auth-container {
        display: flex;
        flex-direction: column;
        gap: 16px;
        width: 100%;
        max-width: 320px;
        margin: 0 auto;
    }

    .auth-button {
        position: relative;
        width: 100%;
        height: 40px;
        border-radius: 4px;
        border: 1px solid rgba(0, 0, 0, 0.15);
        background-color: white;
        cursor: pointer;
        padding: 0;
        overflow: hidden;
        transition: background-color 0.2s, box-shadow 0.2s;
    }

    .auth-button:hover {
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    }

    .auth-button-content {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        width: 100%;
    }

    .auth-icon {
        height: 18px;
        width: 18px;
        margin-right: 10px;
        object-fit: contain;
    }

    .auth-text {
        font-family: Roboto, Arial, sans-serif;
        font-size: 14px;
        font-weight: 500;
    }

    /* Google Button */
    .google-button {
        background-color: white;
        color: rgba(0, 0, 0, 0.54);
    }

    .google-button:hover {
        background-color: #f8f8f8;
    }

    /* Facebook Button */
    .facebook-button {
        background-color: #1877F2;
        border-color: #1877F2;
        color: white;
    }

    .facebook-button:hover {
        background-color: #166FE5;
    }

    /* GitHub Button */
    .github-button {
        background-color: white;
        border-color: #24292E;
        color: #24292E;
    }

    .github-button:hover {
        background-color: #f6f8fa;
    }

    /* Microsoft Button */
    .microsoft-button {
        background-color: #2F2F2F;
        border-color: #2F2F2F;
        color: white;
    }

    .microsoft-button:hover {
        background-color: #262626;
    }
</style>

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}