@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Pinetree.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <div>
        <p>
            Currently, there are no external authentication services available.
        </p>
    </div>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <div class="auth-container">
                @foreach (var provider in externalLogins)
                {
                    <ExternalLoginButton 
                        Provider="provider" 
                        ProviderParameterName="provider" 
                        ButtonTitle="@($"Log in using your {provider.DisplayName} account")" />
                }
            </div>
        </div>
    </form>
}

<ExternalLoginStyles />

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}