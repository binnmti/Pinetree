@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Pinetree.Components.Services
@using Pinetree.Model
@using Pinetree.Data
@using System.Diagnostics
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProtectedLocalStorage ProtectedLocalStore
@implements IDisposable
@rendermode InteractiveServer

<nav class="navbar navbar-expand-lg bg-body-tertiary bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">PineTree</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse ms-auto" id="navbarSupportedContent">
            <ul class="navbar-nav ms-auto">
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item">
                            <button class="nav-link" @onclick="CreateFile">
                                <i class="bi bi-file-earmark-plus" aria-hidden="true"></i> Create File
                            </button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link" @onclick="FileList">
                                <i class="bi bi-card-list" aria-hidden="true"></i> File List
                            </button>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="Account/Manage">
                                <i class="bi bi-person-fill" aria-hidden="true"></i> @context.User.Identity?.Name
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken />
                                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                <button type="submit" class="nav-link">
                                    <i class="bi bi-arrow-bar-up" aria-hidden="true"></i> Logout
                                </button>
                            </form>
                        </li>
                    </Authorized>
                    <NotAuthorized>
                        <li class="nav-item">
                            <NavLink class="nav-link" @onclick="TryItNow" style="cursor:pointer">
                                <i class="bi bi-tools"></i> Try It Now
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="Account/Register">
                                <i class="bi bi-person" aria-hidden="true"></i> Register
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="Account/Login">
                                <i class="bi bi-person-badge" aria-hidden="true"></i> Login
                            </NavLink>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>
            </ul>

            @*          <form class="d-flex" role="search">
                <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-success" type="submit">Search</button>
            </form>
 *@
        </div>
    </div>
</nav>


@code {
    private string? currentUrl;

    private async Task CreateFile()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userName = authState.User.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
        Debug.Assert(userName != null);
        var url = await new PineconeService(DbContext).CreatePineconeAsync(userName);
        NavigationManager.NavigateTo(url);
    }

    private async Task FileList()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userName = authState.User.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
        Debug.Assert(userName != null);
        var url = $"/FileList/{userName}";
        NavigationManager.NavigateTo(url);
    }

    private async Task TryItNow()
    {
        string userId;
        var userIdResult = await ProtectedLocalStore.GetAsync<string>("UserId");
        if (userIdResult.Success && userIdResult.Value != null)
        {
            userId = userIdResult.Value;
        }
        else
        {
            userId = Guid.NewGuid().ToString("N");
            await ProtectedLocalStore.SetAsync("UserId", userId);
        }
        var service = new PineconeService(DbContext);
        var url = await service.CreatePineconeAsync(userId);
        NavigationManager.NavigateTo(url);
    }
    
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
