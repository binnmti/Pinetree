@using Pinetree.Services
@using Pinetree.Shared.Services
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<footer class="footer @GetFooterClass()">
    <div class="container">
        <div class="d-flex flex-column align-items-center">
            <div class="footer-links my-1">
                <a href="/changelog" class="mx-2">Changelog</a>
                <a href="/terms" class="mx-2">Terms</a>
                <a href="/privacy" class="mx-2">Privacy</a>
                <a href="/commercial-transactions" class="mx-2">ÁâπÂÆöÂïÜÂèñÂºïÊ≥ï„Å´Âü∫„Å•„ÅèË°®Ë®ò</a>
                <a href="https://x.com/pinetree_site" target="_blank" rel="noopener noreferrer" class="mx-2">
                    <i class="bi bi-twitter-x"></i>
                </a>
                <a href="https://github.com/binnmti/Pinetree" target="_blank" rel="noopener noreferrer" class="mx-2">
                    <i class="bi bi-github"></i>
                </a>
            </div>
            <div class="footer-copyright my-1 text-center">
                <span>¬© 2025 Pinetree</span>
                <span class="version ms-2">Version @appVersion</span>
            </div>
            <div class="language-switcher-container my-1">
                <div class="dropdown">
                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <span style="font-size: 1.2em;">@GetCurrentLanguageFlag()</span>
                        <span class="ms-1">@GetCurrentLanguageName()</span>
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="languageDropdown">
                        <li>
                            <button class="dropdown-item @(IsCurrentLanguage("en") ? "active" : "")" @onclick="SetEnglish">
                                <span style="font-size: 1.2em;">@GetCountryFlag("US")</span>
                                <span class="ms-2">English</span>
                            </button>
                        </li>
                        <li>
                            <button class="dropdown-item @(IsCurrentLanguage("ja") ? "active" : "")" @onclick="SetJapanese">
                                <span style="font-size: 1.2em;">@GetCountryFlag("JP")</span>
                                <span class="ms-2">Êó•Êú¨Ë™û</span>
                            </button>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</footer>

<style>
    .footer {
        width: 100%;
        background-color: #f5f5f5;
        padding: 10px 0;
        border-top: 1px solid #ddd;
        margin-top: 20px;
    }

    .footer-fixed {
        position: fixed;
        bottom: 0;
        left: 0;
        z-index: 1000;
    }

    .footer-hidden {
        display: none;
    }
    
    .footer-links {
        font-size: 0.9rem;
    }

    .footer-links a {
        text-decoration: none;
        color: #666;
        transition: color 0.2s;
    }

    .footer-links a:hover {
        color: #0056b3;
    }

    .footer-copyright {
        font-size: 0.85rem;
        color: #666;
    }

    .version {
        color: #888;
    }

    .language-switcher-container {
        margin-top: 5px;
    }
    
    .language-switcher-container .dropdown-toggle {
        font-size: 0.875rem;
        padding: 0.25rem 0.5rem;
    }
    
    .language-switcher-container .dropdown-menu {
        min-width: 120px;
        font-size: 0.875rem;
    }
    
    .language-switcher-container .dropdown-item {
        padding: 0.375rem 0.75rem;
        border: none;
        background: none;
        width: 100%;
        text-align: left;
        cursor: pointer;
        color: inherit;
    }
    
    .language-switcher-container .dropdown-item:hover {
        background-color: #f8f9fa;
        color: inherit;
    }
    
    .language-switcher-container .dropdown-item:focus {
        background-color: #f8f9fa;
        color: inherit;
        outline: none;
        box-shadow: none;
    }
    
    .language-switcher-container .dropdown-item:active {
        background-color: #f8f9fa;
        color: inherit;
    }
    
    .language-switcher-container .dropdown-item.active {
        background-color: #0d6efd;
        color: white;
    }
    
    .language-switcher-container .dropdown-item.active:hover,
    .language-switcher-container .dropdown-item.active:focus,
    .language-switcher-container .dropdown-item.active:active {
        background-color: #0d6efd;
        color: white;
    }
</style>

@code {
    [Inject]
    private IConfiguration Configuration { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private VersionService VersionService { get; set; } = default!;

    [Inject]
    private LocalizationService LocalizationService { get; set; } = default!;

    private string appVersion = "1.0.0";

    protected override void OnInitialized()
    {
        LocalizationService.CultureChanged += OnCultureChanged;
    }

    private void OnCultureChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LocalizationService.InitializeAsync();
            StateHasChanged();
        }
    }

    private bool IsCurrentLanguage(string culture)
    {
        return LocalizationService.CurrentCulture.TwoLetterISOLanguageName == culture;
    }

    private async Task SetEnglish()
    {
        await LocalizationService.SetCultureAsync("en");
    }

    private async Task SetJapanese()
    {
        await LocalizationService.SetCultureAsync("ja");
    }

    private string GetCurrentLanguageIcon()
    {
        return LocalizationService.CurrentCulture.TwoLetterISOLanguageName switch
        {
            "en" => "bi bi-translate",
            "ja" => "bi bi-moon-stars",
            _ => "bi bi-globe"
        };
    }

    private string GetCountryFlag(string countryCode)
    {
        if (string.IsNullOrEmpty(countryCode) || countryCode.Length != 2)
            return "üåê"; // Globe emoji as fallback

        // Convert country code to Unicode flag emoji
        // Each letter is converted to Regional Indicator Symbol
        var flag = string.Empty;
        foreach (char c in countryCode.ToUpper())
        {
            if (c >= 'A' && c <= 'Z')
            {
                // Regional Indicator Symbol Letter A = U+1F1E6 (üá¶)
                // Add (c - 'A') to get the correct letter
                flag += char.ConvertFromUtf32(0x1F1E6 + (c - 'A'));
            }
        }
        return flag;
    }

    private string GetCurrentLanguageFlag()
    {
        return LocalizationService.CurrentCulture.TwoLetterISOLanguageName switch
        {
            "en" => GetCountryFlag("US"), // üá∫üá∏
            "ja" => GetCountryFlag("JP"), // üáØüáµ
            _ => "üåê"
        };
    }

    private string GetCurrentLanguageName()
    {
        return LocalizationService.CurrentCulture.TwoLetterISOLanguageName switch
        {
            "en" => "English",
            "ja" => "Êó•Êú¨Ë™û",
            _ => "Unknown"
        };
    }

    private string GetFooterClass()
    {
        var path = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).ToLowerInvariant();

        if (path.StartsWith("play") ||
            path.StartsWith("edit/") ||
            path.StartsWith("trash/") ||
            path.StartsWith("view/"))
        {
            return "footer-hidden";
        }

        if (path == "")
        {
            return "footer-fixed";
        }

        return "";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            appVersion = await VersionService.GetLatestVersionAsync();
        }
        catch (Exception)
        {
            appVersion = Configuration["AppVersion"] ?? "1.0.0";
        }
        
        NavigationManager.LocationChanged += (sender, e) => StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= (sender, e) => StateHasChanged();
        LocalizationService.CultureChanged -= OnCultureChanged;
    }
}