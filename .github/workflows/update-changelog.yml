name: Update Changelog

on:
  pull_request:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get PR details
        id: pr
        run: |
          # Fix: Use github.event.number instead of github.event.issue.number for PR events
          pr_number=${{ github.event.number }}
          pr_data=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number")
          
          echo "number=$pr_number" >> $GITHUB_OUTPUT
          echo "branch=$(echo "$pr_data" | jq -r '.head.ref')" >> $GITHUB_OUTPUT
          echo "title=$(echo "$pr_data" | jq -r '.title')" >> $GITHUB_OUTPUT
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$pr_data" | jq -r '.body // ""' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "author=$(echo "$pr_data" | jq -r '.user.login')" >> $GITHUB_OUTPUT
          echo "url=$(echo "$pr_data" | jq -r '.html_url')" >> $GITHUB_OUTPUT
      
      - name: Checkout PR branch
        run: |
          git fetch origin ${{ steps.pr.outputs.branch }}
          git checkout ${{ steps.pr.outputs.branch }}
      
      - name: Update Changelog
        id: changelog
        run: |
          pr_body="${{ steps.pr.outputs.body }}"
          
          # Look for version number in PR body (format: [1.2.3] or Version: 1.2.3)
          version_match=$(echo "$pr_body" | grep -o -E "(\[([0-9]+\.[0-9]+\.[0-9]+)\]|Version:\s*([0-9]+\.[0-9]+\.[0-9]+))" | head -1)
          
          if [[ "$version_match" =~ \[([0-9]+\.[0-9]+\.[0-9]+)\] ]]; then
            version_number="${BASH_REMATCH[1]}"
          elif [[ "$version_match" =~ Version:\s*([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            version_number="${BASH_REMATCH[1]}"
          else
            version_number="0.$(date +%m).$(date +%d)"
          fi
          
          # Extract changelog content - simplified approach
          changelog_content=""
          
          if echo "$pr_body" | grep -q "\[.*\]"; then
            # Extract everything after [version] line
            changelog_content=$(echo "$pr_body" | sed -n '/^\[.*\]/,$ p' | tail -n +2)
          elif echo "$pr_body" | grep -q "### "; then
            # Extract all ### sections
            changelog_content=$(echo "$pr_body" | grep -A 999 "### ")
          else
            # Fallback to PR title
            changelog_content="### Features"$'\n'"- ${{ steps.pr.outputs.title }}"
          fi
          
          # Clean up changelog content
          changelog_content=$(echo "$changelog_content" | sed '/^$/d' | sed '/^\s*$/d')
          
          # Create new changelog entry with timestamp
          date_string=$(date +%Y-%m-%d)
          time_string=$(date +%H:%M:%S)
          
          {
            echo "## [$version_number] - $date_string $time_string"
            echo ""
            echo "$changelog_content"
            echo ""
            echo "---"
            echo ""
            cat Pinetree/wwwroot/Changelog.md
          } > temp_changelog.md
          
          mv temp_changelog.md Pinetree/wwwroot/Changelog.md
          
          echo "version=$version_number" >> $GITHUB_OUTPUT
          echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Commit and push changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Pinetree/wwwroot/Changelog.md
          git commit -m "docs: update changelog for v${{ steps.changelog.outputs.version }} (PR #${{ steps.pr.outputs.number }})"
          git push origin ${{ steps.pr.outputs.branch }}
      
      - name: Send Discord notification
        if: success()
        run: |
          escaped_changelog=$(echo "${{ steps.changelog.outputs.changelog_content }}" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          
          payload=$(cat << EOF
          {
            "embeds": [{
              "title": "📝 Changelog Updated - v${{ steps.changelog.outputs.version }}",
              "description": "**PR #${{ steps.pr.outputs.number }}: ${{ steps.pr.outputs.title }}**\\n\\n${escaped_changelog}",
              "color": 3447003,
              "fields": [
                {
                  "name": "Author",
                  "value": "${{ steps.pr.outputs.author }}",
                  "inline": true
                },
                {
                  "name": "PR Number",
                  "value": "#${{ steps.pr.outputs.number }}",
                  "inline": true
                },
                {
                  "name": "Version",
                  "value": "${{ steps.changelog.outputs.version }}",
                  "inline": true
                }
              ],
              "url": "${{ steps.pr.outputs.url }}",
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
            }]
          }
          EOF
          )
          
          echo "$payload" | curl -H "Content-Type: application/json" -X POST -d @- "${{ secrets.DISCORD_WEBHOOK_URL }}"