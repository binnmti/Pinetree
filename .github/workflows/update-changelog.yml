name: Update Changelog and Notify Discord

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    if: |
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/update-changelog') &&
      (github.event.comment.author_association == 'MEMBER' || 
       github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'COLLABORATOR')
      steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get PR details
        id: pr
        run: |
          pr_number=${{ github.event.issue.number }}
          pr_data=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number")
          
          echo "branch=$(echo "$pr_data" | jq -r '.head.ref')" >> $GITHUB_OUTPUT
          echo "title=$(echo "$pr_data" | jq -r '.title')" >> $GITHUB_OUTPUT
          
          # Use multiline syntax for PR body to preserve newlines
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$pr_data" | jq -r '.body // ""' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "author=$(echo "$pr_data" | jq -r '.user.login')" >> $GITHUB_OUTPUT
          echo "url=$(echo "$pr_data" | jq -r '.html_url')" >> $GITHUB_OUTPUT
      
      - name: Checkout PR branch
        run: |
          git fetch origin ${{ steps.pr.outputs.branch }}
          git checkout ${{ steps.pr.outputs.branch }}
      
      - name: Update Changelog
        id: changelog
        run: |
          # Extract changelog from PR body or use title
          pr_body="${{ steps.pr.outputs.body }}"
          if echo "$pr_body" | grep -q "## Changelog"; then
            changelog_section=$(echo "$pr_body" | sed -n '/## Changelog/,/##/p' | head -n -1 | tail -n +2)
          else
            changelog_section="${{ steps.pr.outputs.title }}"
          fi
          
          # Create new changelog entry
          date_string=$(date +%Y-%m-%d)
          {
            echo "## $date_string"
            echo ""
            echo "### PR #${{ github.event.issue.number }}: ${{ steps.pr.outputs.title }}"
            echo ""
            echo "$changelog_section"
            echo ""
            cat Pinetree/wwwroot/Changelog.md
          } > temp_changelog.md
          
          mv temp_changelog.md Pinetree/wwwroot/Changelog.md
          
          # Save changelog content for Discord notification
          echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
          echo "**$date_string**" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**PR #${{ github.event.issue.number }}: ${{ steps.pr.outputs.title }}**" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$changelog_section" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Commit and push changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Pinetree/wwwroot/Changelog.md
          git commit -m "docs: update changelog for PR #${{ github.event.issue.number }}"
          git push origin ${{ steps.pr.outputs.branch }}
      
      - name: Send Discord notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d '{
              "embeds": [{
                "title": "üìù Changelog Updated",
                "description": "${{ steps.changelog.outputs.changelog_content }}",
                "color": 3447003,
                "fields": [
                  {
                    "name": "Author",
                    "value": "${{ steps.pr.outputs.author }}",
                    "inline": true
                  },
                  {
                    "name": "PR Number",
                    "value": "#${{ github.event.issue.number }}",
                    "inline": true
                  }
                ],
                "url": "${{ steps.pr.outputs.url }}",
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
              }]
            }' \
            "${{ secrets.DISCORD_WEBHOOK_URL }}"
        - name: Add success reaction to comment
        if: success()
        run: |
          curl -s \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -X POST \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions" \
            -d '{"content":"rocket"}'
      
      - name: Add failure reaction to comment
        if: failure()
        run: |
          curl -s \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -X POST \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions" \
            -d '{"content":"confused"}'
