name: ci/cd
on:
  push:
    branches:
    - main

env:
  AZURE_WEBAPP_PACKAGE_PATH: Pinetree\published
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 9.0.x
  PRODUCTION_SLOT_NAME: swap
  ARTIFACT_RETENTION_DAYS: 3

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props', '**/*.targets') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build the project
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore

    - name: Publish the project
      run: dotnet publish Pinetree/Pinetree.csproj --configuration ${{ env.CONFIGURATION }} --output "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"

    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: webapp-${{ github.sha }}
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  staging-migrate:
    runs-on: windows-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Install EF Core tools
      run: dotnet tool install --global dotnet-ef
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.Pinetree_SPN }}
    - name: Add IP to Azure SQL firewall (Staging)
      run: |
        $ip = (Invoke-WebRequest -Uri https://api.ipify.org).Content
        Write-Host "GitHub Actions IP: $ip"
        az sql server firewall-rule create `
          --resource-group "pinetree-staging" `
          --server "pinetree-staging" `
          --name "GithubActions-Temporary" `
          --start-ip-address $ip `
          --end-ip-address $ip
    - name: Run database migrations (Staging)
      run: |
        cd Pinetree
        dotnet ef database update --configuration ${{ env.CONFIGURATION }} --verbose
      env:
        ConnectionStrings__DefaultConnection: ${{ secrets.STAGING_DB_CONNECTION }}
        TypeScriptCompileBlocked: true
    - name: Remove IP from Azure SQL firewall (Staging)
      if: always()
      run: |
        az sql server firewall-rule delete `
          --resource-group "pinetree-staging" `
          --server "pinetree-staging" `
          --name "GithubActions-Temporary"
  staging-deploy:
    runs-on: windows-latest
    needs: [build, staging-migrate]
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: webapp-${{ github.sha }}
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.Pinetree_SPN }}

    - name: Deploy to Staging Environment
      uses: azure/webapps-deploy@v2
      with:
        app-name: pinetree-staging
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Configure Azure Web App Settings (Staging)
      run: |
        az webapp config appsettings set --name pinetree-staging --resource-group pinetree-staging --settings ASPNETCORE_ENVIRONMENT=Staging
  run-gui-tests-staging:
    runs-on: windows-latest
    needs: [build, staging-migrate, staging-deploy]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props', '**/*.targets') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: |
          ~/AppData/Local/ms-playwright
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/Pinetree.UITests.csproj') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Restore and build
      run: |
        dotnet restore
        dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore

    - name: Install Playwright
      run: |
        cd Pinetree.UITests
        dotnet tool install --global Microsoft.Playwright.CLI
        playwright install --with-deps

    - name: Run GUI Tests on Staging
      run: |
        dotnet test Pinetree.UITests/Pinetree.UITests.csproj --configuration ${{ env.CONFIGURATION }} --no-build --logger "trx;LogFileName=staging-guitests-${{ github.sha }}.trx" --results-directory "TestResults" --filter "Category!=LongRunning"
      env:
        PLAYWRIGHT_TIMEOUT: 30000
        ASPNETCORE_ENVIRONMENT: Staging

    - name: Publish Staging Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: staging-gui-test-results-${{ github.sha }}
        path: |
          TestResults/**
          **/TestResults/**
          Pinetree.UITests/bin/**/TestResults/**
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  production-migrate:
    runs-on: windows-latest
    needs: [build, run-gui-tests-staging]
    steps:
    - uses: actions/checkout@v4
    - name: Install EF Core tools
      run: dotnet tool install --global dotnet-ef
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.Pinetree_SPN }}
    - name: Add IP to Azure SQL firewall (Production)
      run: |
        $ip = (Invoke-WebRequest -Uri https://api.ipify.org).Content
        Write-Host "GitHub Actions IP: $ip"
        az sql server firewall-rule create `
          --resource-group "pinetree" `
          --server "pinetree" `
          --name "GithubActions-Temporary" `
          --start-ip-address $ip `
          --end-ip-address $ip
    - name: Run database migrations (Production)
      run: |
        cd Pinetree
        dotnet ef database update --configuration ${{ env.CONFIGURATION }} --verbose
      env:
        ConnectionStrings__DefaultConnection: ${{ secrets.PRODUCTION_DB_CONNECTION }}
        TypeScriptCompileBlocked: true
    - name: Remove IP from Azure SQL firewall (Production)
      if: always()
      run: |
        az sql server firewall-rule delete `
          --resource-group "pinetree" `
          --server "pinetree" `
          --name "GithubActions-Temporary"
  production-deploy:
    runs-on: windows-latest
    needs: [build, run-gui-tests-staging, production-migrate]
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: webapp-${{ github.sha }}
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.Pinetree_SPN }}

    - name: Deploy to Production Green Slot
      uses: azure/webapps-deploy@v2
      with:
        app-name: pinetree
        slot-name: ${{ env.PRODUCTION_SLOT_NAME }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Configure Azure Web App Settings for Production Green Slot
      run: |
        az webapp config appsettings set --name pinetree --resource-group pinetree --slot ${{ env.PRODUCTION_SLOT_NAME }} --settings ASPNETCORE_ENVIRONMENT=Production

    - name: Swap Production Slots
      run: |
        az webapp deployment slot swap --name pinetree --resource-group pinetree --slot ${{ env.PRODUCTION_SLOT_NAME }}
