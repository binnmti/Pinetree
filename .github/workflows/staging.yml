name: staging
on:
  push:
    branches:
    - staging

env:
  AZURE_WEBAPP_PACKAGE_PATH: Pinetree\published
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 9.0.x
  ASPNETCORE_ENVIRONMENT: Staging

jobs:
  # build-and-unit-tests:
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Setup .NET SDK
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
  #   - name: Restore
  #     run: dotnet restore
  #   - name: Build
  #     run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
  #   - name: Run Unit Tests
  #     run: dotnet test Pinetree.Client.TestProject/Pinetree.Client.TestProject.csproj --no-build
  #   - name: Publish
  #     run: dotnet publish Pinetree/Pinetree.csproj --configuration ${{ env.CONFIGURATION }} --output "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"
  #   - name: Publish Artifacts
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: webapp
  #       path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  # migrate:
  #   runs-on: windows-latest
  #   needs: build-and-unit-tests
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Install EF Core tools
  #     run: dotnet tool install --global dotnet-ef
  #   - name: Azure Login
  #     uses: azure/login@v2
  #     with:
  #       creds: ${{ secrets.Pinetree_SPN }}
  #   - name: Add IP to Azure SQL firewall
  #     run: |
  #       $ip = (Invoke-WebRequest -Uri https://api.ipify.org).Content
  #       Write-Host "GitHub Actions IP: $ip"
  #       az sql server firewall-rule create `
  #         --resource-group "pinetree-staging" `
  #         --server "pinetree-staging" `
  #         --name "GithubActions-Temporary" `
  #         --start-ip-address $ip `
  #         --end-ip-address $ip
  #   - name: Run database migrations
  #     run: |
  #       cd Pinetree
  #       dotnet ef database update --configuration ${{ env.CONFIGURATION }} --verbose
  #     env:
  #       ConnectionStrings__DefaultConnection: ${{ secrets.STAGING_DB_CONNECTION }}
  #       TypeScriptCompileBlocked: true
  #   - name: Remove IP from Azure SQL firewall
  #     if: always()
  #     run: |
  #       az sql server firewall-rule delete `
  #         --resource-group "pinetree-staging" `
  #         --server "pinetree-staging" `
  #         --name "GithubActions-Temporary"

  # deploy:
  #   runs-on: windows-latest
  #   needs: [build-and-unit-tests, migrate]
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Download artifact from build job
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: webapp
  #       path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
  #   - name: Azure Login
  #     uses: azure/login@v2
  #     with:
  #       creds: ${{ secrets.Pinetree_SPN }}
  #   - name: Deploy to Azure WebApp
  #     uses: azure/webapps-deploy@v2
  #     with:
  #       app-name: pinetree-staging
  #       package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
  #   - name: Configure Azure Web App Settings
  #     run: |
  #       az webapp config appsettings set --name pinetree-staging --resource-group pinetree-staging --settings ASPNETCORE_ENVIRONMENT=Staging
  #     if: success()

  run-gui-tests:
    runs-on: windows-latest
    # needs: deploy
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

    - name: Cache Playwright browsers
      uses: actions/cache@v3
      id: playwright-cache
      with:
        path: ${{ runner.temp }}\ms-playwright
        key: playwright-${{ runner.os }}-${{ hashFiles('Pinetree.UITests/*.csproj') }}
        restore-keys: |
          playwright-${{ runner.os }}-

    - name: Install Playwright browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      env:
        PLAYWRIGHT_BROWSERS_PATH: ${{ runner.temp }}\ms-playwright
      run: npx playwright install   

    - name: Restore
      run: dotnet restore

    - name: Restore
      run: dotnet restore
    - name: Build Tests
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
    - name: Run GUI Tests
      run: |
        $outputDir = Join-Path $PWD "TestResults"
        Write-Host "Output directory: $outputDir"
        mkdir -Force $outputDir
        dotnet test Pinetree.UITests/Pinetree.UITests.csproj --logger "trx;LogFileName=guitests.trx" --results-directory "$outputDir" --verbosity normal --filter "Category!=LongRunning"
      env:
        ASPNETCORE_ENVIRONMENT: Staging
        PLAYWRIGHT_TIMEOUT: 30000

    - name: Publish Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gui-test-results
        path: |
          TestResults/**
          **/TestResults/**
          Pinetree.UITests/bin/**/TestResults/**

