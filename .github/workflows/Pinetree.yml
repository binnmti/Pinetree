name: Pinetree Deploy
on:
  push:
    branches:
    - terraform

env:
  AZURE_WEBAPP_PACKAGE_PATH: Pinetree\published
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 9.0.x
  TF_WORKING_DIR: terraform-pinetree/environments/staging

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.Pinetree_SPN }}
    - name: Create terraform.tfvars from JSON
      run: |
        echo '${{ secrets.TERRAFORM_VARS }}' | jq -r 'to_entries | .[] | "\(.key) = \"\(.value)\""' > ${{ env.TF_WORKING_DIR }}/terraform.tfvars
    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}
    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TF_WORKING_DIR }}
    - name: Import Resource Group if needed
      run: |
        if ! terraform state list azurerm_resource_group.rg &>/dev/null; then
          echo "Importing existing resource group into terraform state"
          terraform import azurerm_resource_group.rg ${{ secrets.AZURE_RESOURCE_GROUP_ID }}
        fi
      working-directory: ${{ env.TF_WORKING_DIR }}
    - name: Terraform Plan
      run: terraform plan
      working-directory: ${{ env.TF_WORKING_DIR }}
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ${{ env.TF_WORKING_DIR }}

  build:
    runs-on: windows-latest
    needs: terraform
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
    - name: Test
      run: dotnet test --no-build
    - name: Publish
      run: dotnet publish --configuration ${{ env.CONFIGURATION }} --output "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"
    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: webapp
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  migrate:
    runs-on: windows-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Install EF Core tools
      run: dotnet tool install --global dotnet-ef
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.Pinetree_SPN }}
    - name: Add IP to Azure SQL firewall
      run: |
        $ip = (Invoke-WebRequest -Uri https://api.ipify.org).Content
        Write-Host "GitHub Actions IP: $ip"
        az sql server firewall-rule create `
          --resource-group "pinetree-staging" `
          --server "pinetree-staging" `
          --name "GithubActions-Temporary" `
          --start-ip-address $ip `
          --end-ip-address $ip
    - name: Run database migrations
      run: |
        cd Pinetree
        dotnet ef database update --configuration ${{ env.CONFIGURATION }} --verbose
      env:
        ConnectionStrings__DefaultConnection: ${{ secrets.STAGING_DB_CONNECTION }}
        TypeScriptCompileBlocked: true
    - name: Remove IP from Azure SQL firewall
      if: always()
      run: |
        az sql server firewall-rule delete `
          --resource-group "pinetree-staging" `
          --server "pinetree-staging" `
          --name "GithubActions-Temporary"

  deploy:
    runs-on: windows-latest
    needs: [build, migrate]
    steps:
    - uses: actions/checkout@v4
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: webapp
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.Pinetree_SPN }}
    - name: Deploy to Azure WebApp
      uses: azure/webapps-deploy@v2
      with:
        app-name: pinetree-staging
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
